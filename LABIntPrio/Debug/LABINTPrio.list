
LABINTPrio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003548  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003608  08003608  00013608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800367c  0800367c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800367c  0800367c  0001367c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003684  08003684  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003684  08003684  00013684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003688  08003688  00013688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800368c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000000c  08003698  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08003698  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d33b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d82  00000000  00000000  0002d36f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  0002f0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa0  00000000  00000000  0002fc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010c84  00000000  00000000  000306f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d483  00000000  00000000  00041374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068876  00000000  00000000  0004e7f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b706d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002898  00000000  00000000  000b70c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080035f0 	.word	0x080035f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080035f0 	.word	0x080035f0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fa84 	bl	80009b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f81c 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f90a 	bl	80006cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004b8:	f000 f8d8 	bl	800066c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004bc:	f000 f882 	bl	80005c4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80004c0:	4b07      	ldr	r3, [pc, #28]	; (80004e0 <main+0x38>)
 80004c2:	0018      	movs	r0, r3
 80004c4:	f001 fd52 	bl	8001f6c <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 80004c8:	23fa      	movs	r3, #250	; 0xfa
 80004ca:	009b      	lsls	r3, r3, #2
 80004cc:	0018      	movs	r0, r3
 80004ce:	f000 fae3 	bl	8000a98 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, MSG, 5,10);
 80004d2:	4904      	ldr	r1, [pc, #16]	; (80004e4 <main+0x3c>)
 80004d4:	4804      	ldr	r0, [pc, #16]	; (80004e8 <main+0x40>)
 80004d6:	230a      	movs	r3, #10
 80004d8:	2205      	movs	r2, #5
 80004da:	f002 f801 	bl	80024e0 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80004de:	e7f3      	b.n	80004c8 <main+0x20>
 80004e0:	20000028 	.word	0x20000028
 80004e4:	08003608 	.word	0x08003608
 80004e8:	20000068 	.word	0x20000068

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b590      	push	{r4, r7, lr}
 80004ee:	b099      	sub	sp, #100	; 0x64
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	242c      	movs	r4, #44	; 0x2c
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	0018      	movs	r0, r3
 80004f8:	2334      	movs	r3, #52	; 0x34
 80004fa:	001a      	movs	r2, r3
 80004fc:	2100      	movs	r1, #0
 80004fe:	f003 f86f 	bl	80035e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000502:	2318      	movs	r3, #24
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	0018      	movs	r0, r3
 8000508:	2314      	movs	r3, #20
 800050a:	001a      	movs	r2, r3
 800050c:	2100      	movs	r1, #0
 800050e:	f003 f867 	bl	80035e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000512:	003b      	movs	r3, r7
 8000514:	0018      	movs	r0, r3
 8000516:	2318      	movs	r3, #24
 8000518:	001a      	movs	r2, r3
 800051a:	2100      	movs	r1, #0
 800051c:	f003 f860 	bl	80035e0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000520:	4b26      	ldr	r3, [pc, #152]	; (80005bc <SystemClock_Config+0xd0>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a26      	ldr	r2, [pc, #152]	; (80005c0 <SystemClock_Config+0xd4>)
 8000526:	401a      	ands	r2, r3
 8000528:	4b24      	ldr	r3, [pc, #144]	; (80005bc <SystemClock_Config+0xd0>)
 800052a:	2180      	movs	r1, #128	; 0x80
 800052c:	0109      	lsls	r1, r1, #4
 800052e:	430a      	orrs	r2, r1
 8000530:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000532:	0021      	movs	r1, r4
 8000534:	187b      	adds	r3, r7, r1
 8000536:	2210      	movs	r2, #16
 8000538:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800053a:	187b      	adds	r3, r7, r1
 800053c:	2201      	movs	r2, #1
 800053e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2200      	movs	r2, #0
 8000544:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	22a0      	movs	r2, #160	; 0xa0
 800054a:	0212      	lsls	r2, r2, #8
 800054c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2200      	movs	r2, #0
 8000552:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000554:	187b      	adds	r3, r7, r1
 8000556:	0018      	movs	r0, r3
 8000558:	f000 fdfc 	bl	8001154 <HAL_RCC_OscConfig>
 800055c:	1e03      	subs	r3, r0, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000560:	f000 f938 	bl	80007d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000564:	2118      	movs	r1, #24
 8000566:	187b      	adds	r3, r7, r1
 8000568:	220f      	movs	r2, #15
 800056a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2200      	movs	r2, #0
 8000570:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2200      	movs	r2, #0
 800057c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2100      	movs	r1, #0
 8000588:	0018      	movs	r0, r3
 800058a:	f001 f95f 	bl	800184c <HAL_RCC_ClockConfig>
 800058e:	1e03      	subs	r3, r0, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000592:	f000 f91f 	bl	80007d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000596:	003b      	movs	r3, r7
 8000598:	2202      	movs	r2, #2
 800059a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800059c:	003b      	movs	r3, r7
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005a2:	003b      	movs	r3, r7
 80005a4:	0018      	movs	r0, r3
 80005a6:	f001 fb75 	bl	8001c94 <HAL_RCCEx_PeriphCLKConfig>
 80005aa:	1e03      	subs	r3, r0, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005ae:	f000 f911 	bl	80007d4 <Error_Handler>
  }
}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	46bd      	mov	sp, r7
 80005b6:	b019      	add	sp, #100	; 0x64
 80005b8:	bd90      	pop	{r4, r7, pc}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	40007000 	.word	0x40007000
 80005c0:	ffffe7ff 	.word	0xffffe7ff

080005c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ca:	2308      	movs	r3, #8
 80005cc:	18fb      	adds	r3, r7, r3
 80005ce:	0018      	movs	r0, r3
 80005d0:	2310      	movs	r3, #16
 80005d2:	001a      	movs	r2, r3
 80005d4:	2100      	movs	r1, #0
 80005d6:	f003 f803 	bl	80035e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005da:	003b      	movs	r3, r7
 80005dc:	0018      	movs	r0, r3
 80005de:	2308      	movs	r3, #8
 80005e0:	001a      	movs	r2, r3
 80005e2:	2100      	movs	r1, #0
 80005e4:	f002 fffc 	bl	80035e0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005e8:	4b1e      	ldr	r3, [pc, #120]	; (8000664 <MX_TIM2_Init+0xa0>)
 80005ea:	2280      	movs	r2, #128	; 0x80
 80005ec:	05d2      	lsls	r2, r2, #23
 80005ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 80005f0:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <MX_TIM2_Init+0xa0>)
 80005f2:	221f      	movs	r2, #31
 80005f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f6:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <MX_TIM2_Init+0xa0>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80005fc:	4b19      	ldr	r3, [pc, #100]	; (8000664 <MX_TIM2_Init+0xa0>)
 80005fe:	4a1a      	ldr	r2, [pc, #104]	; (8000668 <MX_TIM2_Init+0xa4>)
 8000600:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000602:	4b18      	ldr	r3, [pc, #96]	; (8000664 <MX_TIM2_Init+0xa0>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000608:	4b16      	ldr	r3, [pc, #88]	; (8000664 <MX_TIM2_Init+0xa0>)
 800060a:	2200      	movs	r2, #0
 800060c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800060e:	4b15      	ldr	r3, [pc, #84]	; (8000664 <MX_TIM2_Init+0xa0>)
 8000610:	0018      	movs	r0, r3
 8000612:	f001 fc6b 	bl	8001eec <HAL_TIM_Base_Init>
 8000616:	1e03      	subs	r3, r0, #0
 8000618:	d001      	beq.n	800061e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800061a:	f000 f8db 	bl	80007d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800061e:	2108      	movs	r1, #8
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2280      	movs	r2, #128	; 0x80
 8000624:	0152      	lsls	r2, r2, #5
 8000626:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000628:	187a      	adds	r2, r7, r1
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_TIM2_Init+0xa0>)
 800062c:	0011      	movs	r1, r2
 800062e:	0018      	movs	r0, r3
 8000630:	f001 fce8 	bl	8002004 <HAL_TIM_ConfigClockSource>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000638:	f000 f8cc 	bl	80007d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800063c:	003b      	movs	r3, r7
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000642:	003b      	movs	r3, r7
 8000644:	2200      	movs	r2, #0
 8000646:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000648:	003a      	movs	r2, r7
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_TIM2_Init+0xa0>)
 800064c:	0011      	movs	r1, r2
 800064e:	0018      	movs	r0, r3
 8000650:	f001 fe9a 	bl	8002388 <HAL_TIMEx_MasterConfigSynchronization>
 8000654:	1e03      	subs	r3, r0, #0
 8000656:	d001      	beq.n	800065c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000658:	f000 f8bc 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800065c:	46c0      	nop			; (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	b006      	add	sp, #24
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000028 	.word	0x20000028
 8000668:	0000ffff 	.word	0x0000ffff

0800066c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000670:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <MX_USART2_UART_Init+0x58>)
 8000672:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <MX_USART2_UART_Init+0x5c>)
 8000674:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000676:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <MX_USART2_UART_Init+0x58>)
 8000678:	22e1      	movs	r2, #225	; 0xe1
 800067a:	0252      	lsls	r2, r2, #9
 800067c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_USART2_UART_Init+0x58>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_USART2_UART_Init+0x58>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_USART2_UART_Init+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_USART2_UART_Init+0x58>)
 8000692:	220c      	movs	r2, #12
 8000694:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_USART2_UART_Init+0x58>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_USART2_UART_Init+0x58>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_USART2_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_USART2_UART_Init+0x58>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ae:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <MX_USART2_UART_Init+0x58>)
 80006b0:	0018      	movs	r0, r3
 80006b2:	f001 fec1 	bl	8002438 <HAL_UART_Init>
 80006b6:	1e03      	subs	r3, r0, #0
 80006b8:	d001      	beq.n	80006be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ba:	f000 f88b 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000068 	.word	0x20000068
 80006c8:	40004400 	.word	0x40004400

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b590      	push	{r4, r7, lr}
 80006ce:	b089      	sub	sp, #36	; 0x24
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	240c      	movs	r4, #12
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	0018      	movs	r0, r3
 80006d8:	2314      	movs	r3, #20
 80006da:	001a      	movs	r2, r3
 80006dc:	2100      	movs	r1, #0
 80006de:	f002 ff7f 	bl	80035e0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	4b2e      	ldr	r3, [pc, #184]	; (800079c <MX_GPIO_Init+0xd0>)
 80006e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006e6:	4b2d      	ldr	r3, [pc, #180]	; (800079c <MX_GPIO_Init+0xd0>)
 80006e8:	2104      	movs	r1, #4
 80006ea:	430a      	orrs	r2, r1
 80006ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80006ee:	4b2b      	ldr	r3, [pc, #172]	; (800079c <MX_GPIO_Init+0xd0>)
 80006f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006f2:	2204      	movs	r2, #4
 80006f4:	4013      	ands	r3, r2
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	4b28      	ldr	r3, [pc, #160]	; (800079c <MX_GPIO_Init+0xd0>)
 80006fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006fe:	4b27      	ldr	r3, [pc, #156]	; (800079c <MX_GPIO_Init+0xd0>)
 8000700:	2180      	movs	r1, #128	; 0x80
 8000702:	430a      	orrs	r2, r1
 8000704:	62da      	str	r2, [r3, #44]	; 0x2c
 8000706:	4b25      	ldr	r3, [pc, #148]	; (800079c <MX_GPIO_Init+0xd0>)
 8000708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800070a:	2280      	movs	r2, #128	; 0x80
 800070c:	4013      	ands	r3, r2
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	4b22      	ldr	r3, [pc, #136]	; (800079c <MX_GPIO_Init+0xd0>)
 8000714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000716:	4b21      	ldr	r3, [pc, #132]	; (800079c <MX_GPIO_Init+0xd0>)
 8000718:	2101      	movs	r1, #1
 800071a:	430a      	orrs	r2, r1
 800071c:	62da      	str	r2, [r3, #44]	; 0x2c
 800071e:	4b1f      	ldr	r3, [pc, #124]	; (800079c <MX_GPIO_Init+0xd0>)
 8000720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000722:	2201      	movs	r2, #1
 8000724:	4013      	ands	r3, r2
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800072a:	23a0      	movs	r3, #160	; 0xa0
 800072c:	05db      	lsls	r3, r3, #23
 800072e:	2200      	movs	r2, #0
 8000730:	2120      	movs	r1, #32
 8000732:	0018      	movs	r0, r3
 8000734:	f000 fcd5 	bl	80010e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000738:	193b      	adds	r3, r7, r4
 800073a:	2280      	movs	r2, #128	; 0x80
 800073c:	0192      	lsls	r2, r2, #6
 800073e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000740:	193b      	adds	r3, r7, r4
 8000742:	2284      	movs	r2, #132	; 0x84
 8000744:	0392      	lsls	r2, r2, #14
 8000746:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	193b      	adds	r3, r7, r4
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800074e:	193b      	adds	r3, r7, r4
 8000750:	4a13      	ldr	r2, [pc, #76]	; (80007a0 <MX_GPIO_Init+0xd4>)
 8000752:	0019      	movs	r1, r3
 8000754:	0010      	movs	r0, r2
 8000756:	f000 fb29 	bl	8000dac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800075a:	0021      	movs	r1, r4
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2220      	movs	r2, #32
 8000760:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2201      	movs	r2, #1
 8000766:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	187b      	adds	r3, r7, r1
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000774:	187a      	adds	r2, r7, r1
 8000776:	23a0      	movs	r3, #160	; 0xa0
 8000778:	05db      	lsls	r3, r3, #23
 800077a:	0011      	movs	r1, r2
 800077c:	0018      	movs	r0, r3
 800077e:	f000 fb15 	bl	8000dac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2100      	movs	r1, #0
 8000786:	2007      	movs	r0, #7
 8000788:	f000 fa56 	bl	8000c38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800078c:	2007      	movs	r0, #7
 800078e:	f000 fa68 	bl	8000c62 <HAL_NVIC_EnableIRQ>

}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	b009      	add	sp, #36	; 0x24
 8000798:	bd90      	pop	{r4, r7, pc}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	40021000 	.word	0x40021000
 80007a0:	50000800 	.word	0x50000800

080007a4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	0002      	movs	r2, r0
 80007ac:	1dbb      	adds	r3, r7, #6
 80007ae:	801a      	strh	r2, [r3, #0]
	while(!HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin));
 80007b0:	46c0      	nop			; (mov r8, r8)
 80007b2:	2380      	movs	r3, #128	; 0x80
 80007b4:	019b      	lsls	r3, r3, #6
 80007b6:	4a06      	ldr	r2, [pc, #24]	; (80007d0 <HAL_GPIO_EXTI_Callback+0x2c>)
 80007b8:	0019      	movs	r1, r3
 80007ba:	0010      	movs	r0, r2
 80007bc:	f000 fc74 	bl	80010a8 <HAL_GPIO_ReadPin>
 80007c0:	1e03      	subs	r3, r0, #0
 80007c2:	d0f6      	beq.n	80007b2 <HAL_GPIO_EXTI_Callback+0xe>
}
 80007c4:	46c0      	nop			; (mov r8, r8)
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b002      	add	sp, #8
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	50000800 	.word	0x50000800

080007d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d8:	b672      	cpsid	i
}
 80007da:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007dc:	e7fe      	b.n	80007dc <Error_Handler+0x8>
	...

080007e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <HAL_MspInit+0x24>)
 80007e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_MspInit+0x24>)
 80007ea:	2101      	movs	r1, #1
 80007ec:	430a      	orrs	r2, r1
 80007ee:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <HAL_MspInit+0x24>)
 80007f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007f4:	4b03      	ldr	r3, [pc, #12]	; (8000804 <HAL_MspInit+0x24>)
 80007f6:	2180      	movs	r1, #128	; 0x80
 80007f8:	0549      	lsls	r1, r1, #21
 80007fa:	430a      	orrs	r2, r1
 80007fc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40021000 	.word	0x40021000

08000808 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	2380      	movs	r3, #128	; 0x80
 8000816:	05db      	lsls	r3, r3, #23
 8000818:	429a      	cmp	r2, r3
 800081a:	d105      	bne.n	8000828 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800081c:	4b04      	ldr	r3, [pc, #16]	; (8000830 <HAL_TIM_Base_MspInit+0x28>)
 800081e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000820:	4b03      	ldr	r3, [pc, #12]	; (8000830 <HAL_TIM_Base_MspInit+0x28>)
 8000822:	2101      	movs	r1, #1
 8000824:	430a      	orrs	r2, r1
 8000826:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000828:	46c0      	nop			; (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	b002      	add	sp, #8
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40021000 	.word	0x40021000

08000834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000834:	b590      	push	{r4, r7, lr}
 8000836:	b089      	sub	sp, #36	; 0x24
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	240c      	movs	r4, #12
 800083e:	193b      	adds	r3, r7, r4
 8000840:	0018      	movs	r0, r3
 8000842:	2314      	movs	r3, #20
 8000844:	001a      	movs	r2, r3
 8000846:	2100      	movs	r1, #0
 8000848:	f002 feca 	bl	80035e0 <memset>
  if(huart->Instance==USART2)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a1c      	ldr	r2, [pc, #112]	; (80008c4 <HAL_UART_MspInit+0x90>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d131      	bne.n	80008ba <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000856:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <HAL_UART_MspInit+0x94>)
 8000858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800085a:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <HAL_UART_MspInit+0x94>)
 800085c:	2180      	movs	r1, #128	; 0x80
 800085e:	0289      	lsls	r1, r1, #10
 8000860:	430a      	orrs	r2, r1
 8000862:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000864:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <HAL_UART_MspInit+0x94>)
 8000866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000868:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <HAL_UART_MspInit+0x94>)
 800086a:	2101      	movs	r1, #1
 800086c:	430a      	orrs	r2, r1
 800086e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000870:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <HAL_UART_MspInit+0x94>)
 8000872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000874:	2201      	movs	r2, #1
 8000876:	4013      	ands	r3, r2
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800087c:	0021      	movs	r1, r4
 800087e:	187b      	adds	r3, r7, r1
 8000880:	220c      	movs	r2, #12
 8000882:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2202      	movs	r2, #2
 8000888:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2203      	movs	r2, #3
 8000894:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2204      	movs	r2, #4
 800089a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	187a      	adds	r2, r7, r1
 800089e:	23a0      	movs	r3, #160	; 0xa0
 80008a0:	05db      	lsls	r3, r3, #23
 80008a2:	0011      	movs	r1, r2
 80008a4:	0018      	movs	r0, r3
 80008a6:	f000 fa81 	bl	8000dac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2101      	movs	r1, #1
 80008ae:	201c      	movs	r0, #28
 80008b0:	f000 f9c2 	bl	8000c38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008b4:	201c      	movs	r0, #28
 80008b6:	f000 f9d4 	bl	8000c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	b009      	add	sp, #36	; 0x24
 80008c0:	bd90      	pop	{r4, r7, pc}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	40004400 	.word	0x40004400
 80008c8:	40021000 	.word	0x40021000

080008cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <NMI_Handler+0x4>

080008d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <HardFault_Handler+0x4>

080008d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f0:	f000 f8b6 	bl	8000a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f4:	46c0      	nop			; (mov r8, r8)
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80008fe:	2380      	movs	r3, #128	; 0x80
 8000900:	019b      	lsls	r3, r3, #6
 8000902:	0018      	movs	r0, r3
 8000904:	f000 fc0a 	bl	800111c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000908:	46c0      	nop			; (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000914:	4b03      	ldr	r3, [pc, #12]	; (8000924 <USART2_IRQHandler+0x14>)
 8000916:	0018      	movs	r0, r3
 8000918:	f001 fe82 	bl	8002620 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	20000068 	.word	0x20000068

08000928 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000934:	4813      	ldr	r0, [pc, #76]	; (8000984 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000936:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000938:	f7ff fff6 	bl	8000928 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 800093c:	4812      	ldr	r0, [pc, #72]	; (8000988 <LoopForever+0x6>)
    LDR R1, [R0]
 800093e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000940:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000942:	4a12      	ldr	r2, [pc, #72]	; (800098c <LoopForever+0xa>)
    CMP R1, R2
 8000944:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000946:	d105      	bne.n	8000954 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000948:	4811      	ldr	r0, [pc, #68]	; (8000990 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800094a:	4912      	ldr	r1, [pc, #72]	; (8000994 <LoopForever+0x12>)
    STR R1, [R0]
 800094c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800094e:	4812      	ldr	r0, [pc, #72]	; (8000998 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000950:	4912      	ldr	r1, [pc, #72]	; (800099c <LoopForever+0x1a>)
    STR R1, [R0]
 8000952:	6001      	str	r1, [r0, #0]

08000954 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000954:	4812      	ldr	r0, [pc, #72]	; (80009a0 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000956:	4913      	ldr	r1, [pc, #76]	; (80009a4 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000958:	4a13      	ldr	r2, [pc, #76]	; (80009a8 <LoopForever+0x26>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800095c:	e002      	b.n	8000964 <LoopCopyDataInit>

0800095e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000962:	3304      	adds	r3, #4

08000964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000968:	d3f9      	bcc.n	800095e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096a:	4a10      	ldr	r2, [pc, #64]	; (80009ac <LoopForever+0x2a>)
  ldr r4, =_ebss
 800096c:	4c10      	ldr	r4, [pc, #64]	; (80009b0 <LoopForever+0x2e>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000970:	e001      	b.n	8000976 <LoopFillZerobss>

08000972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000974:	3204      	adds	r2, #4

08000976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000978:	d3fb      	bcc.n	8000972 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800097a:	f002 fe0d 	bl	8003598 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800097e:	f7ff fd93 	bl	80004a8 <main>

08000982 <LoopForever>:

LoopForever:
    b LoopForever
 8000982:	e7fe      	b.n	8000982 <LoopForever>
   ldr   r0, =_estack
 8000984:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8000988:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800098c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000990:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000994:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000998:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 800099c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80009a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009a8:	0800368c 	.word	0x0800368c
  ldr r2, =_sbss
 80009ac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009b0:	200000f4 	.word	0x200000f4

080009b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009b4:	e7fe      	b.n	80009b4 <ADC1_IRQHandler>
	...

080009b8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009be:	1dfb      	adds	r3, r7, #7
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80009c4:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <HAL_Init+0x3c>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <HAL_Init+0x3c>)
 80009ca:	2140      	movs	r1, #64	; 0x40
 80009cc:	430a      	orrs	r2, r1
 80009ce:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009d0:	2000      	movs	r0, #0
 80009d2:	f000 f811 	bl	80009f8 <HAL_InitTick>
 80009d6:	1e03      	subs	r3, r0, #0
 80009d8:	d003      	beq.n	80009e2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	2201      	movs	r2, #1
 80009de:	701a      	strb	r2, [r3, #0]
 80009e0:	e001      	b.n	80009e6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009e2:	f7ff fefd 	bl	80007e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	781b      	ldrb	r3, [r3, #0]
}
 80009ea:	0018      	movs	r0, r3
 80009ec:	46bd      	mov	sp, r7
 80009ee:	b002      	add	sp, #8
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	40022000 	.word	0x40022000

080009f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <HAL_InitTick+0x5c>)
 8000a02:	681c      	ldr	r4, [r3, #0]
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <HAL_InitTick+0x60>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	0019      	movs	r1, r3
 8000a0a:	23fa      	movs	r3, #250	; 0xfa
 8000a0c:	0098      	lsls	r0, r3, #2
 8000a0e:	f7ff fb7b 	bl	8000108 <__udivsi3>
 8000a12:	0003      	movs	r3, r0
 8000a14:	0019      	movs	r1, r3
 8000a16:	0020      	movs	r0, r4
 8000a18:	f7ff fb76 	bl	8000108 <__udivsi3>
 8000a1c:	0003      	movs	r3, r0
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f000 f92f 	bl	8000c82 <HAL_SYSTICK_Config>
 8000a24:	1e03      	subs	r3, r0, #0
 8000a26:	d001      	beq.n	8000a2c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	e00f      	b.n	8000a4c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2b03      	cmp	r3, #3
 8000a30:	d80b      	bhi.n	8000a4a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	2301      	movs	r3, #1
 8000a36:	425b      	negs	r3, r3
 8000a38:	2200      	movs	r2, #0
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f000 f8fc 	bl	8000c38 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <HAL_InitTick+0x64>)
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a46:	2300      	movs	r3, #0
 8000a48:	e000      	b.n	8000a4c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
}
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b003      	add	sp, #12
 8000a52:	bd90      	pop	{r4, r7, pc}
 8000a54:	20000000 	.word	0x20000000
 8000a58:	20000008 	.word	0x20000008
 8000a5c:	20000004 	.word	0x20000004

08000a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <HAL_IncTick+0x1c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	001a      	movs	r2, r3
 8000a6a:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <HAL_IncTick+0x20>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	18d2      	adds	r2, r2, r3
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <HAL_IncTick+0x20>)
 8000a72:	601a      	str	r2, [r3, #0]
}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	20000008 	.word	0x20000008
 8000a80:	200000f0 	.word	0x200000f0

08000a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  return uwTick;
 8000a88:	4b02      	ldr	r3, [pc, #8]	; (8000a94 <HAL_GetTick+0x10>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
}
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	200000f0 	.word	0x200000f0

08000a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aa0:	f7ff fff0 	bl	8000a84 <HAL_GetTick>
 8000aa4:	0003      	movs	r3, r0
 8000aa6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	d005      	beq.n	8000abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <HAL_Delay+0x44>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	001a      	movs	r2, r3
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	189b      	adds	r3, r3, r2
 8000abc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	f7ff ffe0 	bl	8000a84 <HAL_GetTick>
 8000ac4:	0002      	movs	r2, r0
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d8f7      	bhi.n	8000ac0 <HAL_Delay+0x28>
  {
  }
}
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	b004      	add	sp, #16
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	20000008 	.word	0x20000008

08000ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	0002      	movs	r2, r0
 8000ae8:	1dfb      	adds	r3, r7, #7
 8000aea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000aec:	1dfb      	adds	r3, r7, #7
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b7f      	cmp	r3, #127	; 0x7f
 8000af2:	d809      	bhi.n	8000b08 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000af4:	1dfb      	adds	r3, r7, #7
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	001a      	movs	r2, r3
 8000afa:	231f      	movs	r3, #31
 8000afc:	401a      	ands	r2, r3
 8000afe:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <__NVIC_EnableIRQ+0x30>)
 8000b00:	2101      	movs	r1, #1
 8000b02:	4091      	lsls	r1, r2
 8000b04:	000a      	movs	r2, r1
 8000b06:	601a      	str	r2, [r3, #0]
  }
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b002      	add	sp, #8
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	e000e100 	.word	0xe000e100

08000b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	0002      	movs	r2, r0
 8000b1c:	6039      	str	r1, [r7, #0]
 8000b1e:	1dfb      	adds	r3, r7, #7
 8000b20:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b7f      	cmp	r3, #127	; 0x7f
 8000b28:	d828      	bhi.n	8000b7c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b2a:	4a2f      	ldr	r2, [pc, #188]	; (8000be8 <__NVIC_SetPriority+0xd4>)
 8000b2c:	1dfb      	adds	r3, r7, #7
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	b25b      	sxtb	r3, r3
 8000b32:	089b      	lsrs	r3, r3, #2
 8000b34:	33c0      	adds	r3, #192	; 0xc0
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	589b      	ldr	r3, [r3, r2]
 8000b3a:	1dfa      	adds	r2, r7, #7
 8000b3c:	7812      	ldrb	r2, [r2, #0]
 8000b3e:	0011      	movs	r1, r2
 8000b40:	2203      	movs	r2, #3
 8000b42:	400a      	ands	r2, r1
 8000b44:	00d2      	lsls	r2, r2, #3
 8000b46:	21ff      	movs	r1, #255	; 0xff
 8000b48:	4091      	lsls	r1, r2
 8000b4a:	000a      	movs	r2, r1
 8000b4c:	43d2      	mvns	r2, r2
 8000b4e:	401a      	ands	r2, r3
 8000b50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	019b      	lsls	r3, r3, #6
 8000b56:	22ff      	movs	r2, #255	; 0xff
 8000b58:	401a      	ands	r2, r3
 8000b5a:	1dfb      	adds	r3, r7, #7
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	0018      	movs	r0, r3
 8000b60:	2303      	movs	r3, #3
 8000b62:	4003      	ands	r3, r0
 8000b64:	00db      	lsls	r3, r3, #3
 8000b66:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b68:	481f      	ldr	r0, [pc, #124]	; (8000be8 <__NVIC_SetPriority+0xd4>)
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	b25b      	sxtb	r3, r3
 8000b70:	089b      	lsrs	r3, r3, #2
 8000b72:	430a      	orrs	r2, r1
 8000b74:	33c0      	adds	r3, #192	; 0xc0
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b7a:	e031      	b.n	8000be0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b7c:	4a1b      	ldr	r2, [pc, #108]	; (8000bec <__NVIC_SetPriority+0xd8>)
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	0019      	movs	r1, r3
 8000b84:	230f      	movs	r3, #15
 8000b86:	400b      	ands	r3, r1
 8000b88:	3b08      	subs	r3, #8
 8000b8a:	089b      	lsrs	r3, r3, #2
 8000b8c:	3306      	adds	r3, #6
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	18d3      	adds	r3, r2, r3
 8000b92:	3304      	adds	r3, #4
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	1dfa      	adds	r2, r7, #7
 8000b98:	7812      	ldrb	r2, [r2, #0]
 8000b9a:	0011      	movs	r1, r2
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	400a      	ands	r2, r1
 8000ba0:	00d2      	lsls	r2, r2, #3
 8000ba2:	21ff      	movs	r1, #255	; 0xff
 8000ba4:	4091      	lsls	r1, r2
 8000ba6:	000a      	movs	r2, r1
 8000ba8:	43d2      	mvns	r2, r2
 8000baa:	401a      	ands	r2, r3
 8000bac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	019b      	lsls	r3, r3, #6
 8000bb2:	22ff      	movs	r2, #255	; 0xff
 8000bb4:	401a      	ands	r2, r3
 8000bb6:	1dfb      	adds	r3, r7, #7
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	0018      	movs	r0, r3
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	4003      	ands	r3, r0
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bc4:	4809      	ldr	r0, [pc, #36]	; (8000bec <__NVIC_SetPriority+0xd8>)
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	001c      	movs	r4, r3
 8000bcc:	230f      	movs	r3, #15
 8000bce:	4023      	ands	r3, r4
 8000bd0:	3b08      	subs	r3, #8
 8000bd2:	089b      	lsrs	r3, r3, #2
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	3306      	adds	r3, #6
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	18c3      	adds	r3, r0, r3
 8000bdc:	3304      	adds	r3, #4
 8000bde:	601a      	str	r2, [r3, #0]
}
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	b003      	add	sp, #12
 8000be6:	bd90      	pop	{r4, r7, pc}
 8000be8:	e000e100 	.word	0xe000e100
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	1e5a      	subs	r2, r3, #1
 8000bfc:	2380      	movs	r3, #128	; 0x80
 8000bfe:	045b      	lsls	r3, r3, #17
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d301      	bcc.n	8000c08 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c04:	2301      	movs	r3, #1
 8000c06:	e010      	b.n	8000c2a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c08:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <SysTick_Config+0x44>)
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	3a01      	subs	r2, #1
 8000c0e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c10:	2301      	movs	r3, #1
 8000c12:	425b      	negs	r3, r3
 8000c14:	2103      	movs	r1, #3
 8000c16:	0018      	movs	r0, r3
 8000c18:	f7ff ff7c 	bl	8000b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <SysTick_Config+0x44>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c22:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <SysTick_Config+0x44>)
 8000c24:	2207      	movs	r2, #7
 8000c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	b002      	add	sp, #8
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	e000e010 	.word	0xe000e010

08000c38 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60b9      	str	r1, [r7, #8]
 8000c40:	607a      	str	r2, [r7, #4]
 8000c42:	210f      	movs	r1, #15
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	1c02      	adds	r2, r0, #0
 8000c48:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	b25b      	sxtb	r3, r3
 8000c52:	0011      	movs	r1, r2
 8000c54:	0018      	movs	r0, r3
 8000c56:	f7ff ff5d 	bl	8000b14 <__NVIC_SetPriority>
}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b004      	add	sp, #16
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	0002      	movs	r2, r0
 8000c6a:	1dfb      	adds	r3, r7, #7
 8000c6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c6e:	1dfb      	adds	r3, r7, #7
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	b25b      	sxtb	r3, r3
 8000c74:	0018      	movs	r0, r3
 8000c76:	f7ff ff33 	bl	8000ae0 <__NVIC_EnableIRQ>
}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b002      	add	sp, #8
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f7ff ffaf 	bl	8000bf0 <SysTick_Config>
 8000c92:	0003      	movs	r3, r0
}
 8000c94:	0018      	movs	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b002      	add	sp, #8
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ca4:	230f      	movs	r3, #15
 8000ca6:	18fb      	adds	r3, r7, r3
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2225      	movs	r2, #37	; 0x25
 8000cb0:	5c9b      	ldrb	r3, [r3, r2]
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d008      	beq.n	8000cca <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2204      	movs	r2, #4
 8000cbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2224      	movs	r2, #36	; 0x24
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e024      	b.n	8000d14 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	210e      	movs	r1, #14
 8000cd6:	438a      	bics	r2, r1
 8000cd8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	438a      	bics	r2, r1
 8000ce8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cee:	221c      	movs	r2, #28
 8000cf0:	401a      	ands	r2, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	4091      	lsls	r1, r2
 8000cfa:	000a      	movs	r2, r1
 8000cfc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2225      	movs	r2, #37	; 0x25
 8000d02:	2101      	movs	r1, #1
 8000d04:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2224      	movs	r2, #36	; 0x24
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	5499      	strb	r1, [r3, r2]

    return status;
 8000d0e:	230f      	movs	r3, #15
 8000d10:	18fb      	adds	r3, r7, r3
 8000d12:	781b      	ldrb	r3, [r3, #0]
  }
}
 8000d14:	0018      	movs	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b004      	add	sp, #16
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d24:	210f      	movs	r1, #15
 8000d26:	187b      	adds	r3, r7, r1
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2225      	movs	r2, #37	; 0x25
 8000d30:	5c9b      	ldrb	r3, [r3, r2]
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d006      	beq.n	8000d46 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2204      	movs	r2, #4
 8000d3c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2201      	movs	r2, #1
 8000d42:	701a      	strb	r2, [r3, #0]
 8000d44:	e02a      	b.n	8000d9c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	210e      	movs	r1, #14
 8000d52:	438a      	bics	r2, r1
 8000d54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2101      	movs	r1, #1
 8000d62:	438a      	bics	r2, r1
 8000d64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	221c      	movs	r2, #28
 8000d6c:	401a      	ands	r2, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	2101      	movs	r1, #1
 8000d74:	4091      	lsls	r1, r2
 8000d76:	000a      	movs	r2, r1
 8000d78:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2225      	movs	r2, #37	; 0x25
 8000d7e:	2101      	movs	r1, #1
 8000d80:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2224      	movs	r2, #36	; 0x24
 8000d86:	2100      	movs	r1, #0
 8000d88:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d004      	beq.n	8000d9c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	0010      	movs	r0, r2
 8000d9a:	4798      	blx	r3
    }
  }
  return status;
 8000d9c:	230f      	movs	r3, #15
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	781b      	ldrb	r3, [r3, #0]
}
 8000da2:	0018      	movs	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b004      	add	sp, #16
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000dc2:	e155      	b.n	8001070 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2101      	movs	r1, #1
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	4091      	lsls	r1, r2
 8000dce:	000a      	movs	r2, r1
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d100      	bne.n	8000ddc <HAL_GPIO_Init+0x30>
 8000dda:	e146      	b.n	800106a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2203      	movs	r2, #3
 8000de2:	4013      	ands	r3, r2
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d005      	beq.n	8000df4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	2203      	movs	r2, #3
 8000dee:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d130      	bne.n	8000e56 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	2203      	movs	r2, #3
 8000e00:	409a      	lsls	r2, r3
 8000e02:	0013      	movs	r3, r2
 8000e04:	43da      	mvns	r2, r3
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	68da      	ldr	r2, [r3, #12]
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	409a      	lsls	r2, r3
 8000e16:	0013      	movs	r3, r2
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	409a      	lsls	r2, r3
 8000e30:	0013      	movs	r3, r2
 8000e32:	43da      	mvns	r2, r3
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	091b      	lsrs	r3, r3, #4
 8000e40:	2201      	movs	r2, #1
 8000e42:	401a      	ands	r2, r3
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	409a      	lsls	r2, r3
 8000e48:	0013      	movs	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	2b03      	cmp	r3, #3
 8000e60:	d017      	beq.n	8000e92 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	409a      	lsls	r2, r3
 8000e70:	0013      	movs	r3, r2
 8000e72:	43da      	mvns	r2, r3
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	4013      	ands	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	689a      	ldr	r2, [r3, #8]
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	409a      	lsls	r2, r3
 8000e84:	0013      	movs	r3, r2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	2203      	movs	r2, #3
 8000e98:	4013      	ands	r3, r2
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d123      	bne.n	8000ee6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	08da      	lsrs	r2, r3, #3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3208      	adds	r2, #8
 8000ea6:	0092      	lsls	r2, r2, #2
 8000ea8:	58d3      	ldr	r3, [r2, r3]
 8000eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	2207      	movs	r2, #7
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	220f      	movs	r2, #15
 8000eb6:	409a      	lsls	r2, r3
 8000eb8:	0013      	movs	r3, r2
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	691a      	ldr	r2, [r3, #16]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	2107      	movs	r1, #7
 8000eca:	400b      	ands	r3, r1
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	409a      	lsls	r2, r3
 8000ed0:	0013      	movs	r3, r2
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	08da      	lsrs	r2, r3, #3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3208      	adds	r2, #8
 8000ee0:	0092      	lsls	r2, r2, #2
 8000ee2:	6939      	ldr	r1, [r7, #16]
 8000ee4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	409a      	lsls	r2, r3
 8000ef4:	0013      	movs	r3, r2
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2203      	movs	r2, #3
 8000f04:	401a      	ands	r2, r3
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	409a      	lsls	r2, r3
 8000f0c:	0013      	movs	r3, r2
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685a      	ldr	r2, [r3, #4]
 8000f1e:	23c0      	movs	r3, #192	; 0xc0
 8000f20:	029b      	lsls	r3, r3, #10
 8000f22:	4013      	ands	r3, r2
 8000f24:	d100      	bne.n	8000f28 <HAL_GPIO_Init+0x17c>
 8000f26:	e0a0      	b.n	800106a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f28:	4b57      	ldr	r3, [pc, #348]	; (8001088 <HAL_GPIO_Init+0x2dc>)
 8000f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f2c:	4b56      	ldr	r3, [pc, #344]	; (8001088 <HAL_GPIO_Init+0x2dc>)
 8000f2e:	2101      	movs	r1, #1
 8000f30:	430a      	orrs	r2, r1
 8000f32:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f34:	4a55      	ldr	r2, [pc, #340]	; (800108c <HAL_GPIO_Init+0x2e0>)
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	089b      	lsrs	r3, r3, #2
 8000f3a:	3302      	adds	r3, #2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	589b      	ldr	r3, [r3, r2]
 8000f40:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	2203      	movs	r2, #3
 8000f46:	4013      	ands	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	220f      	movs	r2, #15
 8000f4c:	409a      	lsls	r2, r3
 8000f4e:	0013      	movs	r3, r2
 8000f50:	43da      	mvns	r2, r3
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	23a0      	movs	r3, #160	; 0xa0
 8000f5c:	05db      	lsls	r3, r3, #23
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d01f      	beq.n	8000fa2 <HAL_GPIO_Init+0x1f6>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4a      	ldr	r2, [pc, #296]	; (8001090 <HAL_GPIO_Init+0x2e4>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d019      	beq.n	8000f9e <HAL_GPIO_Init+0x1f2>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a49      	ldr	r2, [pc, #292]	; (8001094 <HAL_GPIO_Init+0x2e8>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d013      	beq.n	8000f9a <HAL_GPIO_Init+0x1ee>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a48      	ldr	r2, [pc, #288]	; (8001098 <HAL_GPIO_Init+0x2ec>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d00d      	beq.n	8000f96 <HAL_GPIO_Init+0x1ea>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a47      	ldr	r2, [pc, #284]	; (800109c <HAL_GPIO_Init+0x2f0>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d007      	beq.n	8000f92 <HAL_GPIO_Init+0x1e6>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a46      	ldr	r2, [pc, #280]	; (80010a0 <HAL_GPIO_Init+0x2f4>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d101      	bne.n	8000f8e <HAL_GPIO_Init+0x1e2>
 8000f8a:	2305      	movs	r3, #5
 8000f8c:	e00a      	b.n	8000fa4 <HAL_GPIO_Init+0x1f8>
 8000f8e:	2306      	movs	r3, #6
 8000f90:	e008      	b.n	8000fa4 <HAL_GPIO_Init+0x1f8>
 8000f92:	2304      	movs	r3, #4
 8000f94:	e006      	b.n	8000fa4 <HAL_GPIO_Init+0x1f8>
 8000f96:	2303      	movs	r3, #3
 8000f98:	e004      	b.n	8000fa4 <HAL_GPIO_Init+0x1f8>
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	e002      	b.n	8000fa4 <HAL_GPIO_Init+0x1f8>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e000      	b.n	8000fa4 <HAL_GPIO_Init+0x1f8>
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	697a      	ldr	r2, [r7, #20]
 8000fa6:	2103      	movs	r1, #3
 8000fa8:	400a      	ands	r2, r1
 8000faa:	0092      	lsls	r2, r2, #2
 8000fac:	4093      	lsls	r3, r2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fb4:	4935      	ldr	r1, [pc, #212]	; (800108c <HAL_GPIO_Init+0x2e0>)
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	089b      	lsrs	r3, r3, #2
 8000fba:	3302      	adds	r3, #2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fc2:	4b38      	ldr	r3, [pc, #224]	; (80010a4 <HAL_GPIO_Init+0x2f8>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	43da      	mvns	r2, r3
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685a      	ldr	r2, [r3, #4]
 8000fd6:	2380      	movs	r3, #128	; 0x80
 8000fd8:	035b      	lsls	r3, r3, #13
 8000fda:	4013      	ands	r3, r2
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fe6:	4b2f      	ldr	r3, [pc, #188]	; (80010a4 <HAL_GPIO_Init+0x2f8>)
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000fec:	4b2d      	ldr	r3, [pc, #180]	; (80010a4 <HAL_GPIO_Init+0x2f8>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	43da      	mvns	r2, r3
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	2380      	movs	r3, #128	; 0x80
 8001002:	039b      	lsls	r3, r3, #14
 8001004:	4013      	ands	r3, r2
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001010:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <HAL_GPIO_Init+0x2f8>)
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001016:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <HAL_GPIO_Init+0x2f8>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	43da      	mvns	r2, r3
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685a      	ldr	r2, [r3, #4]
 800102a:	2380      	movs	r3, #128	; 0x80
 800102c:	029b      	lsls	r3, r3, #10
 800102e:	4013      	ands	r3, r2
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800103a:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <HAL_GPIO_Init+0x2f8>)
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001040:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <HAL_GPIO_Init+0x2f8>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	43da      	mvns	r2, r3
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	4013      	ands	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	025b      	lsls	r3, r3, #9
 8001058:	4013      	ands	r3, r2
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <HAL_GPIO_Init+0x2f8>)
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	3301      	adds	r3, #1
 800106e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	40da      	lsrs	r2, r3
 8001078:	1e13      	subs	r3, r2, #0
 800107a:	d000      	beq.n	800107e <HAL_GPIO_Init+0x2d2>
 800107c:	e6a2      	b.n	8000dc4 <HAL_GPIO_Init+0x18>
  }
}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	46c0      	nop			; (mov r8, r8)
 8001082:	46bd      	mov	sp, r7
 8001084:	b006      	add	sp, #24
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40021000 	.word	0x40021000
 800108c:	40010000 	.word	0x40010000
 8001090:	50000400 	.word	0x50000400
 8001094:	50000800 	.word	0x50000800
 8001098:	50000c00 	.word	0x50000c00
 800109c:	50001000 	.word	0x50001000
 80010a0:	50001c00 	.word	0x50001c00
 80010a4:	40010400 	.word	0x40010400

080010a8 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	000a      	movs	r2, r1
 80010b2:	1cbb      	adds	r3, r7, #2
 80010b4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	1cba      	adds	r2, r7, #2
 80010bc:	8812      	ldrh	r2, [r2, #0]
 80010be:	4013      	ands	r3, r2
 80010c0:	d004      	beq.n	80010cc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80010c2:	230f      	movs	r3, #15
 80010c4:	18fb      	adds	r3, r7, r3
 80010c6:	2201      	movs	r2, #1
 80010c8:	701a      	strb	r2, [r3, #0]
 80010ca:	e003      	b.n	80010d4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010cc:	230f      	movs	r3, #15
 80010ce:	18fb      	adds	r3, r7, r3
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80010d4:	230f      	movs	r3, #15
 80010d6:	18fb      	adds	r3, r7, r3
 80010d8:	781b      	ldrb	r3, [r3, #0]
}
 80010da:	0018      	movs	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	b004      	add	sp, #16
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	0008      	movs	r0, r1
 80010ec:	0011      	movs	r1, r2
 80010ee:	1cbb      	adds	r3, r7, #2
 80010f0:	1c02      	adds	r2, r0, #0
 80010f2:	801a      	strh	r2, [r3, #0]
 80010f4:	1c7b      	adds	r3, r7, #1
 80010f6:	1c0a      	adds	r2, r1, #0
 80010f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010fa:	1c7b      	adds	r3, r7, #1
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d004      	beq.n	800110c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001102:	1cbb      	adds	r3, r7, #2
 8001104:	881a      	ldrh	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800110a:	e003      	b.n	8001114 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800110c:	1cbb      	adds	r3, r7, #2
 800110e:	881a      	ldrh	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001114:	46c0      	nop			; (mov r8, r8)
 8001116:	46bd      	mov	sp, r7
 8001118:	b002      	add	sp, #8
 800111a:	bd80      	pop	{r7, pc}

0800111c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	0002      	movs	r2, r0
 8001124:	1dbb      	adds	r3, r7, #6
 8001126:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800112a:	695b      	ldr	r3, [r3, #20]
 800112c:	1dba      	adds	r2, r7, #6
 800112e:	8812      	ldrh	r2, [r2, #0]
 8001130:	4013      	ands	r3, r2
 8001132:	d008      	beq.n	8001146 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001136:	1dba      	adds	r2, r7, #6
 8001138:	8812      	ldrh	r2, [r2, #0]
 800113a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800113c:	1dbb      	adds	r3, r7, #6
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	0018      	movs	r0, r3
 8001142:	f7ff fb2f 	bl	80007a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	46bd      	mov	sp, r7
 800114a:	b002      	add	sp, #8
 800114c:	bd80      	pop	{r7, pc}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	40010400 	.word	0x40010400

08001154 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001154:	b5b0      	push	{r4, r5, r7, lr}
 8001156:	b08a      	sub	sp, #40	; 0x28
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d102      	bne.n	8001168 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	f000 fb6c 	bl	8001840 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001168:	4bc8      	ldr	r3, [pc, #800]	; (800148c <HAL_RCC_OscConfig+0x338>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	220c      	movs	r2, #12
 800116e:	4013      	ands	r3, r2
 8001170:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001172:	4bc6      	ldr	r3, [pc, #792]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001174:	68da      	ldr	r2, [r3, #12]
 8001176:	2380      	movs	r3, #128	; 0x80
 8001178:	025b      	lsls	r3, r3, #9
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2201      	movs	r2, #1
 8001184:	4013      	ands	r3, r2
 8001186:	d100      	bne.n	800118a <HAL_RCC_OscConfig+0x36>
 8001188:	e07d      	b.n	8001286 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	2b08      	cmp	r3, #8
 800118e:	d007      	beq.n	80011a0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	2b0c      	cmp	r3, #12
 8001194:	d112      	bne.n	80011bc <HAL_RCC_OscConfig+0x68>
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	2380      	movs	r3, #128	; 0x80
 800119a:	025b      	lsls	r3, r3, #9
 800119c:	429a      	cmp	r2, r3
 800119e:	d10d      	bne.n	80011bc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a0:	4bba      	ldr	r3, [pc, #744]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	2380      	movs	r3, #128	; 0x80
 80011a6:	029b      	lsls	r3, r3, #10
 80011a8:	4013      	ands	r3, r2
 80011aa:	d100      	bne.n	80011ae <HAL_RCC_OscConfig+0x5a>
 80011ac:	e06a      	b.n	8001284 <HAL_RCC_OscConfig+0x130>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d166      	bne.n	8001284 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	f000 fb42 	bl	8001840 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	2380      	movs	r3, #128	; 0x80
 80011c2:	025b      	lsls	r3, r3, #9
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d107      	bne.n	80011d8 <HAL_RCC_OscConfig+0x84>
 80011c8:	4bb0      	ldr	r3, [pc, #704]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4baf      	ldr	r3, [pc, #700]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80011ce:	2180      	movs	r1, #128	; 0x80
 80011d0:	0249      	lsls	r1, r1, #9
 80011d2:	430a      	orrs	r2, r1
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	e027      	b.n	8001228 <HAL_RCC_OscConfig+0xd4>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	23a0      	movs	r3, #160	; 0xa0
 80011de:	02db      	lsls	r3, r3, #11
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d10e      	bne.n	8001202 <HAL_RCC_OscConfig+0xae>
 80011e4:	4ba9      	ldr	r3, [pc, #676]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4ba8      	ldr	r3, [pc, #672]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80011ea:	2180      	movs	r1, #128	; 0x80
 80011ec:	02c9      	lsls	r1, r1, #11
 80011ee:	430a      	orrs	r2, r1
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	4ba6      	ldr	r3, [pc, #664]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4ba5      	ldr	r3, [pc, #660]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80011f8:	2180      	movs	r1, #128	; 0x80
 80011fa:	0249      	lsls	r1, r1, #9
 80011fc:	430a      	orrs	r2, r1
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	e012      	b.n	8001228 <HAL_RCC_OscConfig+0xd4>
 8001202:	4ba2      	ldr	r3, [pc, #648]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	4ba1      	ldr	r3, [pc, #644]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001208:	49a1      	ldr	r1, [pc, #644]	; (8001490 <HAL_RCC_OscConfig+0x33c>)
 800120a:	400a      	ands	r2, r1
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	4b9f      	ldr	r3, [pc, #636]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	2380      	movs	r3, #128	; 0x80
 8001214:	025b      	lsls	r3, r3, #9
 8001216:	4013      	ands	r3, r2
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	4b9b      	ldr	r3, [pc, #620]	; (800148c <HAL_RCC_OscConfig+0x338>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b9a      	ldr	r3, [pc, #616]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001222:	499c      	ldr	r1, [pc, #624]	; (8001494 <HAL_RCC_OscConfig+0x340>)
 8001224:	400a      	ands	r2, r1
 8001226:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d014      	beq.n	800125a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001230:	f7ff fc28 	bl	8000a84 <HAL_GetTick>
 8001234:	0003      	movs	r3, r0
 8001236:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001238:	e008      	b.n	800124c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800123a:	f7ff fc23 	bl	8000a84 <HAL_GetTick>
 800123e:	0002      	movs	r2, r0
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b64      	cmp	r3, #100	; 0x64
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e2f9      	b.n	8001840 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800124c:	4b8f      	ldr	r3, [pc, #572]	; (800148c <HAL_RCC_OscConfig+0x338>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	029b      	lsls	r3, r3, #10
 8001254:	4013      	ands	r3, r2
 8001256:	d0f0      	beq.n	800123a <HAL_RCC_OscConfig+0xe6>
 8001258:	e015      	b.n	8001286 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125a:	f7ff fc13 	bl	8000a84 <HAL_GetTick>
 800125e:	0003      	movs	r3, r0
 8001260:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001264:	f7ff fc0e 	bl	8000a84 <HAL_GetTick>
 8001268:	0002      	movs	r2, r0
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b64      	cmp	r3, #100	; 0x64
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e2e4      	b.n	8001840 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001276:	4b85      	ldr	r3, [pc, #532]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	2380      	movs	r3, #128	; 0x80
 800127c:	029b      	lsls	r3, r3, #10
 800127e:	4013      	ands	r3, r2
 8001280:	d1f0      	bne.n	8001264 <HAL_RCC_OscConfig+0x110>
 8001282:	e000      	b.n	8001286 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001284:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2202      	movs	r2, #2
 800128c:	4013      	ands	r3, r2
 800128e:	d100      	bne.n	8001292 <HAL_RCC_OscConfig+0x13e>
 8001290:	e099      	b.n	80013c6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	2220      	movs	r2, #32
 800129c:	4013      	ands	r3, r2
 800129e:	d009      	beq.n	80012b4 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80012a0:	4b7a      	ldr	r3, [pc, #488]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b79      	ldr	r3, [pc, #484]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80012a6:	2120      	movs	r1, #32
 80012a8:	430a      	orrs	r2, r1
 80012aa:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80012ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ae:	2220      	movs	r2, #32
 80012b0:	4393      	bics	r3, r2
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	d005      	beq.n	80012c6 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	2b0c      	cmp	r3, #12
 80012be:	d13e      	bne.n	800133e <HAL_RCC_OscConfig+0x1ea>
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d13b      	bne.n	800133e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80012c6:	4b71      	ldr	r3, [pc, #452]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2204      	movs	r2, #4
 80012cc:	4013      	ands	r3, r2
 80012ce:	d004      	beq.n	80012da <HAL_RCC_OscConfig+0x186>
 80012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e2b2      	b.n	8001840 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012da:	4b6c      	ldr	r3, [pc, #432]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	4a6e      	ldr	r2, [pc, #440]	; (8001498 <HAL_RCC_OscConfig+0x344>)
 80012e0:	4013      	ands	r3, r2
 80012e2:	0019      	movs	r1, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	021a      	lsls	r2, r3, #8
 80012ea:	4b68      	ldr	r3, [pc, #416]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80012ec:	430a      	orrs	r2, r1
 80012ee:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80012f0:	4b66      	ldr	r3, [pc, #408]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2209      	movs	r2, #9
 80012f6:	4393      	bics	r3, r2
 80012f8:	0019      	movs	r1, r3
 80012fa:	4b64      	ldr	r3, [pc, #400]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80012fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012fe:	430a      	orrs	r2, r1
 8001300:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001302:	f000 fbeb 	bl	8001adc <HAL_RCC_GetSysClockFreq>
 8001306:	0001      	movs	r1, r0
 8001308:	4b60      	ldr	r3, [pc, #384]	; (800148c <HAL_RCC_OscConfig+0x338>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	091b      	lsrs	r3, r3, #4
 800130e:	220f      	movs	r2, #15
 8001310:	4013      	ands	r3, r2
 8001312:	4a62      	ldr	r2, [pc, #392]	; (800149c <HAL_RCC_OscConfig+0x348>)
 8001314:	5cd3      	ldrb	r3, [r2, r3]
 8001316:	000a      	movs	r2, r1
 8001318:	40da      	lsrs	r2, r3
 800131a:	4b61      	ldr	r3, [pc, #388]	; (80014a0 <HAL_RCC_OscConfig+0x34c>)
 800131c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800131e:	4b61      	ldr	r3, [pc, #388]	; (80014a4 <HAL_RCC_OscConfig+0x350>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2513      	movs	r5, #19
 8001324:	197c      	adds	r4, r7, r5
 8001326:	0018      	movs	r0, r3
 8001328:	f7ff fb66 	bl	80009f8 <HAL_InitTick>
 800132c:	0003      	movs	r3, r0
 800132e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001330:	197b      	adds	r3, r7, r5
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d046      	beq.n	80013c6 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001338:	197b      	adds	r3, r7, r5
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	e280      	b.n	8001840 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	2b00      	cmp	r3, #0
 8001342:	d027      	beq.n	8001394 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001344:	4b51      	ldr	r3, [pc, #324]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2209      	movs	r2, #9
 800134a:	4393      	bics	r3, r2
 800134c:	0019      	movs	r1, r3
 800134e:	4b4f      	ldr	r3, [pc, #316]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001352:	430a      	orrs	r2, r1
 8001354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001356:	f7ff fb95 	bl	8000a84 <HAL_GetTick>
 800135a:	0003      	movs	r3, r0
 800135c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001360:	f7ff fb90 	bl	8000a84 <HAL_GetTick>
 8001364:	0002      	movs	r2, r0
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e266      	b.n	8001840 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001372:	4b46      	ldr	r3, [pc, #280]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2204      	movs	r2, #4
 8001378:	4013      	ands	r3, r2
 800137a:	d0f1      	beq.n	8001360 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137c:	4b43      	ldr	r3, [pc, #268]	; (800148c <HAL_RCC_OscConfig+0x338>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	4a45      	ldr	r2, [pc, #276]	; (8001498 <HAL_RCC_OscConfig+0x344>)
 8001382:	4013      	ands	r3, r2
 8001384:	0019      	movs	r1, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	021a      	lsls	r2, r3, #8
 800138c:	4b3f      	ldr	r3, [pc, #252]	; (800148c <HAL_RCC_OscConfig+0x338>)
 800138e:	430a      	orrs	r2, r1
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	e018      	b.n	80013c6 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001394:	4b3d      	ldr	r3, [pc, #244]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b3c      	ldr	r3, [pc, #240]	; (800148c <HAL_RCC_OscConfig+0x338>)
 800139a:	2101      	movs	r1, #1
 800139c:	438a      	bics	r2, r1
 800139e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a0:	f7ff fb70 	bl	8000a84 <HAL_GetTick>
 80013a4:	0003      	movs	r3, r0
 80013a6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013aa:	f7ff fb6b 	bl	8000a84 <HAL_GetTick>
 80013ae:	0002      	movs	r2, r0
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e241      	b.n	8001840 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013bc:	4b33      	ldr	r3, [pc, #204]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2204      	movs	r2, #4
 80013c2:	4013      	ands	r3, r2
 80013c4:	d1f1      	bne.n	80013aa <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2210      	movs	r2, #16
 80013cc:	4013      	ands	r3, r2
 80013ce:	d100      	bne.n	80013d2 <HAL_RCC_OscConfig+0x27e>
 80013d0:	e0a1      	b.n	8001516 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d140      	bne.n	800145a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013d8:	4b2c      	ldr	r3, [pc, #176]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	2380      	movs	r3, #128	; 0x80
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4013      	ands	r3, r2
 80013e2:	d005      	beq.n	80013f0 <HAL_RCC_OscConfig+0x29c>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d101      	bne.n	80013f0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e227      	b.n	8001840 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013f0:	4b26      	ldr	r3, [pc, #152]	; (800148c <HAL_RCC_OscConfig+0x338>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	4a2c      	ldr	r2, [pc, #176]	; (80014a8 <HAL_RCC_OscConfig+0x354>)
 80013f6:	4013      	ands	r3, r2
 80013f8:	0019      	movs	r1, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a1a      	ldr	r2, [r3, #32]
 80013fe:	4b23      	ldr	r3, [pc, #140]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001400:	430a      	orrs	r2, r1
 8001402:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001404:	4b21      	ldr	r3, [pc, #132]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	0a19      	lsrs	r1, r3, #8
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69db      	ldr	r3, [r3, #28]
 8001410:	061a      	lsls	r2, r3, #24
 8001412:	4b1e      	ldr	r3, [pc, #120]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001414:	430a      	orrs	r2, r1
 8001416:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	0b5b      	lsrs	r3, r3, #13
 800141e:	3301      	adds	r3, #1
 8001420:	2280      	movs	r2, #128	; 0x80
 8001422:	0212      	lsls	r2, r2, #8
 8001424:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001426:	4b19      	ldr	r3, [pc, #100]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	091b      	lsrs	r3, r3, #4
 800142c:	210f      	movs	r1, #15
 800142e:	400b      	ands	r3, r1
 8001430:	491a      	ldr	r1, [pc, #104]	; (800149c <HAL_RCC_OscConfig+0x348>)
 8001432:	5ccb      	ldrb	r3, [r1, r3]
 8001434:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001436:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <HAL_RCC_OscConfig+0x34c>)
 8001438:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800143a:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <HAL_RCC_OscConfig+0x350>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2513      	movs	r5, #19
 8001440:	197c      	adds	r4, r7, r5
 8001442:	0018      	movs	r0, r3
 8001444:	f7ff fad8 	bl	80009f8 <HAL_InitTick>
 8001448:	0003      	movs	r3, r0
 800144a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800144c:	197b      	adds	r3, r7, r5
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d060      	beq.n	8001516 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001454:	197b      	adds	r3, r7, r5
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	e1f2      	b.n	8001840 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d03f      	beq.n	80014e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001462:	4b0a      	ldr	r3, [pc, #40]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <HAL_RCC_OscConfig+0x338>)
 8001468:	2180      	movs	r1, #128	; 0x80
 800146a:	0049      	lsls	r1, r1, #1
 800146c:	430a      	orrs	r2, r1
 800146e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001470:	f7ff fb08 	bl	8000a84 <HAL_GetTick>
 8001474:	0003      	movs	r3, r0
 8001476:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001478:	e018      	b.n	80014ac <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800147a:	f7ff fb03 	bl	8000a84 <HAL_GetTick>
 800147e:	0002      	movs	r2, r0
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d911      	bls.n	80014ac <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e1d9      	b.n	8001840 <HAL_RCC_OscConfig+0x6ec>
 800148c:	40021000 	.word	0x40021000
 8001490:	fffeffff 	.word	0xfffeffff
 8001494:	fffbffff 	.word	0xfffbffff
 8001498:	ffffe0ff 	.word	0xffffe0ff
 800149c:	08003610 	.word	0x08003610
 80014a0:	20000000 	.word	0x20000000
 80014a4:	20000004 	.word	0x20000004
 80014a8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80014ac:	4bc9      	ldr	r3, [pc, #804]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	2380      	movs	r3, #128	; 0x80
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4013      	ands	r3, r2
 80014b6:	d0e0      	beq.n	800147a <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014b8:	4bc6      	ldr	r3, [pc, #792]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	4ac6      	ldr	r2, [pc, #792]	; (80017d8 <HAL_RCC_OscConfig+0x684>)
 80014be:	4013      	ands	r3, r2
 80014c0:	0019      	movs	r1, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a1a      	ldr	r2, [r3, #32]
 80014c6:	4bc3      	ldr	r3, [pc, #780]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 80014c8:	430a      	orrs	r2, r1
 80014ca:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014cc:	4bc1      	ldr	r3, [pc, #772]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	021b      	lsls	r3, r3, #8
 80014d2:	0a19      	lsrs	r1, r3, #8
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69db      	ldr	r3, [r3, #28]
 80014d8:	061a      	lsls	r2, r3, #24
 80014da:	4bbe      	ldr	r3, [pc, #760]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 80014dc:	430a      	orrs	r2, r1
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	e019      	b.n	8001516 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014e2:	4bbc      	ldr	r3, [pc, #752]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	4bbb      	ldr	r3, [pc, #748]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 80014e8:	49bc      	ldr	r1, [pc, #752]	; (80017dc <HAL_RCC_OscConfig+0x688>)
 80014ea:	400a      	ands	r2, r1
 80014ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ee:	f7ff fac9 	bl	8000a84 <HAL_GetTick>
 80014f2:	0003      	movs	r3, r0
 80014f4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014f8:	f7ff fac4 	bl	8000a84 <HAL_GetTick>
 80014fc:	0002      	movs	r2, r0
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e19a      	b.n	8001840 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800150a:	4bb2      	ldr	r3, [pc, #712]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4013      	ands	r3, r2
 8001514:	d1f0      	bne.n	80014f8 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2208      	movs	r2, #8
 800151c:	4013      	ands	r3, r2
 800151e:	d036      	beq.n	800158e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d019      	beq.n	800155c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001528:	4baa      	ldr	r3, [pc, #680]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 800152a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800152c:	4ba9      	ldr	r3, [pc, #676]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 800152e:	2101      	movs	r1, #1
 8001530:	430a      	orrs	r2, r1
 8001532:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001534:	f7ff faa6 	bl	8000a84 <HAL_GetTick>
 8001538:	0003      	movs	r3, r0
 800153a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800153e:	f7ff faa1 	bl	8000a84 <HAL_GetTick>
 8001542:	0002      	movs	r2, r0
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e177      	b.n	8001840 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001550:	4ba0      	ldr	r3, [pc, #640]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 8001552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001554:	2202      	movs	r2, #2
 8001556:	4013      	ands	r3, r2
 8001558:	d0f1      	beq.n	800153e <HAL_RCC_OscConfig+0x3ea>
 800155a:	e018      	b.n	800158e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800155c:	4b9d      	ldr	r3, [pc, #628]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 800155e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001560:	4b9c      	ldr	r3, [pc, #624]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 8001562:	2101      	movs	r1, #1
 8001564:	438a      	bics	r2, r1
 8001566:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001568:	f7ff fa8c 	bl	8000a84 <HAL_GetTick>
 800156c:	0003      	movs	r3, r0
 800156e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001572:	f7ff fa87 	bl	8000a84 <HAL_GetTick>
 8001576:	0002      	movs	r2, r0
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e15d      	b.n	8001840 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001584:	4b93      	ldr	r3, [pc, #588]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 8001586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001588:	2202      	movs	r2, #2
 800158a:	4013      	ands	r3, r2
 800158c:	d1f1      	bne.n	8001572 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2204      	movs	r2, #4
 8001594:	4013      	ands	r3, r2
 8001596:	d100      	bne.n	800159a <HAL_RCC_OscConfig+0x446>
 8001598:	e0ae      	b.n	80016f8 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800159a:	2023      	movs	r0, #35	; 0x23
 800159c:	183b      	adds	r3, r7, r0
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015a2:	4b8c      	ldr	r3, [pc, #560]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 80015a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015a6:	2380      	movs	r3, #128	; 0x80
 80015a8:	055b      	lsls	r3, r3, #21
 80015aa:	4013      	ands	r3, r2
 80015ac:	d109      	bne.n	80015c2 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ae:	4b89      	ldr	r3, [pc, #548]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 80015b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015b2:	4b88      	ldr	r3, [pc, #544]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 80015b4:	2180      	movs	r1, #128	; 0x80
 80015b6:	0549      	lsls	r1, r1, #21
 80015b8:	430a      	orrs	r2, r1
 80015ba:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80015bc:	183b      	adds	r3, r7, r0
 80015be:	2201      	movs	r2, #1
 80015c0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c2:	4b87      	ldr	r3, [pc, #540]	; (80017e0 <HAL_RCC_OscConfig+0x68c>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4013      	ands	r3, r2
 80015cc:	d11a      	bne.n	8001604 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ce:	4b84      	ldr	r3, [pc, #528]	; (80017e0 <HAL_RCC_OscConfig+0x68c>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	4b83      	ldr	r3, [pc, #524]	; (80017e0 <HAL_RCC_OscConfig+0x68c>)
 80015d4:	2180      	movs	r1, #128	; 0x80
 80015d6:	0049      	lsls	r1, r1, #1
 80015d8:	430a      	orrs	r2, r1
 80015da:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015dc:	f7ff fa52 	bl	8000a84 <HAL_GetTick>
 80015e0:	0003      	movs	r3, r0
 80015e2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015e6:	f7ff fa4d 	bl	8000a84 <HAL_GetTick>
 80015ea:	0002      	movs	r2, r0
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b64      	cmp	r3, #100	; 0x64
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e123      	b.n	8001840 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f8:	4b79      	ldr	r3, [pc, #484]	; (80017e0 <HAL_RCC_OscConfig+0x68c>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	2380      	movs	r3, #128	; 0x80
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4013      	ands	r3, r2
 8001602:	d0f0      	beq.n	80015e6 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	2380      	movs	r3, #128	; 0x80
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	429a      	cmp	r2, r3
 800160e:	d107      	bne.n	8001620 <HAL_RCC_OscConfig+0x4cc>
 8001610:	4b70      	ldr	r3, [pc, #448]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 8001612:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001614:	4b6f      	ldr	r3, [pc, #444]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 8001616:	2180      	movs	r1, #128	; 0x80
 8001618:	0049      	lsls	r1, r1, #1
 800161a:	430a      	orrs	r2, r1
 800161c:	651a      	str	r2, [r3, #80]	; 0x50
 800161e:	e031      	b.n	8001684 <HAL_RCC_OscConfig+0x530>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d10c      	bne.n	8001642 <HAL_RCC_OscConfig+0x4ee>
 8001628:	4b6a      	ldr	r3, [pc, #424]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 800162a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800162c:	4b69      	ldr	r3, [pc, #420]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 800162e:	496b      	ldr	r1, [pc, #428]	; (80017dc <HAL_RCC_OscConfig+0x688>)
 8001630:	400a      	ands	r2, r1
 8001632:	651a      	str	r2, [r3, #80]	; 0x50
 8001634:	4b67      	ldr	r3, [pc, #412]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 8001636:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001638:	4b66      	ldr	r3, [pc, #408]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 800163a:	496a      	ldr	r1, [pc, #424]	; (80017e4 <HAL_RCC_OscConfig+0x690>)
 800163c:	400a      	ands	r2, r1
 800163e:	651a      	str	r2, [r3, #80]	; 0x50
 8001640:	e020      	b.n	8001684 <HAL_RCC_OscConfig+0x530>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	23a0      	movs	r3, #160	; 0xa0
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	429a      	cmp	r2, r3
 800164c:	d10e      	bne.n	800166c <HAL_RCC_OscConfig+0x518>
 800164e:	4b61      	ldr	r3, [pc, #388]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 8001650:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001652:	4b60      	ldr	r3, [pc, #384]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 8001654:	2180      	movs	r1, #128	; 0x80
 8001656:	00c9      	lsls	r1, r1, #3
 8001658:	430a      	orrs	r2, r1
 800165a:	651a      	str	r2, [r3, #80]	; 0x50
 800165c:	4b5d      	ldr	r3, [pc, #372]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 800165e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001660:	4b5c      	ldr	r3, [pc, #368]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 8001662:	2180      	movs	r1, #128	; 0x80
 8001664:	0049      	lsls	r1, r1, #1
 8001666:	430a      	orrs	r2, r1
 8001668:	651a      	str	r2, [r3, #80]	; 0x50
 800166a:	e00b      	b.n	8001684 <HAL_RCC_OscConfig+0x530>
 800166c:	4b59      	ldr	r3, [pc, #356]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 800166e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001670:	4b58      	ldr	r3, [pc, #352]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 8001672:	495a      	ldr	r1, [pc, #360]	; (80017dc <HAL_RCC_OscConfig+0x688>)
 8001674:	400a      	ands	r2, r1
 8001676:	651a      	str	r2, [r3, #80]	; 0x50
 8001678:	4b56      	ldr	r3, [pc, #344]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 800167a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800167c:	4b55      	ldr	r3, [pc, #340]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 800167e:	4959      	ldr	r1, [pc, #356]	; (80017e4 <HAL_RCC_OscConfig+0x690>)
 8001680:	400a      	ands	r2, r1
 8001682:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d015      	beq.n	80016b8 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168c:	f7ff f9fa 	bl	8000a84 <HAL_GetTick>
 8001690:	0003      	movs	r3, r0
 8001692:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001694:	e009      	b.n	80016aa <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001696:	f7ff f9f5 	bl	8000a84 <HAL_GetTick>
 800169a:	0002      	movs	r2, r0
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	4a51      	ldr	r2, [pc, #324]	; (80017e8 <HAL_RCC_OscConfig+0x694>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e0ca      	b.n	8001840 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016aa:	4b4a      	ldr	r3, [pc, #296]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 80016ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016ae:	2380      	movs	r3, #128	; 0x80
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4013      	ands	r3, r2
 80016b4:	d0ef      	beq.n	8001696 <HAL_RCC_OscConfig+0x542>
 80016b6:	e014      	b.n	80016e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b8:	f7ff f9e4 	bl	8000a84 <HAL_GetTick>
 80016bc:	0003      	movs	r3, r0
 80016be:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016c0:	e009      	b.n	80016d6 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c2:	f7ff f9df 	bl	8000a84 <HAL_GetTick>
 80016c6:	0002      	movs	r2, r0
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	4a46      	ldr	r2, [pc, #280]	; (80017e8 <HAL_RCC_OscConfig+0x694>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e0b4      	b.n	8001840 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016d6:	4b3f      	ldr	r3, [pc, #252]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 80016d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016da:	2380      	movs	r3, #128	; 0x80
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4013      	ands	r3, r2
 80016e0:	d1ef      	bne.n	80016c2 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016e2:	2323      	movs	r3, #35	; 0x23
 80016e4:	18fb      	adds	r3, r7, r3
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d105      	bne.n	80016f8 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ec:	4b39      	ldr	r3, [pc, #228]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 80016ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016f0:	4b38      	ldr	r3, [pc, #224]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 80016f2:	493e      	ldr	r1, [pc, #248]	; (80017ec <HAL_RCC_OscConfig+0x698>)
 80016f4:	400a      	ands	r2, r1
 80016f6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d100      	bne.n	8001702 <HAL_RCC_OscConfig+0x5ae>
 8001700:	e09d      	b.n	800183e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	2b0c      	cmp	r3, #12
 8001706:	d100      	bne.n	800170a <HAL_RCC_OscConfig+0x5b6>
 8001708:	e076      	b.n	80017f8 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	2b02      	cmp	r3, #2
 8001710:	d145      	bne.n	800179e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001712:	4b30      	ldr	r3, [pc, #192]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4b2f      	ldr	r3, [pc, #188]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 8001718:	4935      	ldr	r1, [pc, #212]	; (80017f0 <HAL_RCC_OscConfig+0x69c>)
 800171a:	400a      	ands	r2, r1
 800171c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171e:	f7ff f9b1 	bl	8000a84 <HAL_GetTick>
 8001722:	0003      	movs	r3, r0
 8001724:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001728:	f7ff f9ac 	bl	8000a84 <HAL_GetTick>
 800172c:	0002      	movs	r2, r0
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e082      	b.n	8001840 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800173a:	4b26      	ldr	r3, [pc, #152]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	049b      	lsls	r3, r3, #18
 8001742:	4013      	ands	r3, r2
 8001744:	d1f0      	bne.n	8001728 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001746:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	4a2a      	ldr	r2, [pc, #168]	; (80017f4 <HAL_RCC_OscConfig+0x6a0>)
 800174c:	4013      	ands	r3, r2
 800174e:	0019      	movs	r1, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001758:	431a      	orrs	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	431a      	orrs	r2, r3
 8001760:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 8001762:	430a      	orrs	r2, r1
 8001764:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001766:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 800176c:	2180      	movs	r1, #128	; 0x80
 800176e:	0449      	lsls	r1, r1, #17
 8001770:	430a      	orrs	r2, r1
 8001772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7ff f986 	bl	8000a84 <HAL_GetTick>
 8001778:	0003      	movs	r3, r0
 800177a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800177e:	f7ff f981 	bl	8000a84 <HAL_GetTick>
 8001782:	0002      	movs	r2, r0
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e057      	b.n	8001840 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001790:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	049b      	lsls	r3, r3, #18
 8001798:	4013      	ands	r3, r2
 800179a:	d0f0      	beq.n	800177e <HAL_RCC_OscConfig+0x62a>
 800179c:	e04f      	b.n	800183e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179e:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 80017a4:	4912      	ldr	r1, [pc, #72]	; (80017f0 <HAL_RCC_OscConfig+0x69c>)
 80017a6:	400a      	ands	r2, r1
 80017a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017aa:	f7ff f96b 	bl	8000a84 <HAL_GetTick>
 80017ae:	0003      	movs	r3, r0
 80017b0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b4:	f7ff f966 	bl	8000a84 <HAL_GetTick>
 80017b8:	0002      	movs	r2, r0
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e03c      	b.n	8001840 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017c6:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <HAL_RCC_OscConfig+0x680>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	2380      	movs	r3, #128	; 0x80
 80017cc:	049b      	lsls	r3, r3, #18
 80017ce:	4013      	ands	r3, r2
 80017d0:	d1f0      	bne.n	80017b4 <HAL_RCC_OscConfig+0x660>
 80017d2:	e034      	b.n	800183e <HAL_RCC_OscConfig+0x6ea>
 80017d4:	40021000 	.word	0x40021000
 80017d8:	ffff1fff 	.word	0xffff1fff
 80017dc:	fffffeff 	.word	0xfffffeff
 80017e0:	40007000 	.word	0x40007000
 80017e4:	fffffbff 	.word	0xfffffbff
 80017e8:	00001388 	.word	0x00001388
 80017ec:	efffffff 	.word	0xefffffff
 80017f0:	feffffff 	.word	0xfeffffff
 80017f4:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d101      	bne.n	8001804 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e01d      	b.n	8001840 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001804:	4b10      	ldr	r3, [pc, #64]	; (8001848 <HAL_RCC_OscConfig+0x6f4>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	025b      	lsls	r3, r3, #9
 8001810:	401a      	ands	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001816:	429a      	cmp	r2, r3
 8001818:	d10f      	bne.n	800183a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	23f0      	movs	r3, #240	; 0xf0
 800181e:	039b      	lsls	r3, r3, #14
 8001820:	401a      	ands	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001826:	429a      	cmp	r2, r3
 8001828:	d107      	bne.n	800183a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	23c0      	movs	r3, #192	; 0xc0
 800182e:	041b      	lsls	r3, r3, #16
 8001830:	401a      	ands	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001836:	429a      	cmp	r2, r3
 8001838:	d001      	beq.n	800183e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	0018      	movs	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	b00a      	add	sp, #40	; 0x28
 8001846:	bdb0      	pop	{r4, r5, r7, pc}
 8001848:	40021000 	.word	0x40021000

0800184c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800184c:	b5b0      	push	{r4, r5, r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e128      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001860:	4b96      	ldr	r3, [pc, #600]	; (8001abc <HAL_RCC_ClockConfig+0x270>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2201      	movs	r2, #1
 8001866:	4013      	ands	r3, r2
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d91e      	bls.n	80018ac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186e:	4b93      	ldr	r3, [pc, #588]	; (8001abc <HAL_RCC_ClockConfig+0x270>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2201      	movs	r2, #1
 8001874:	4393      	bics	r3, r2
 8001876:	0019      	movs	r1, r3
 8001878:	4b90      	ldr	r3, [pc, #576]	; (8001abc <HAL_RCC_ClockConfig+0x270>)
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	430a      	orrs	r2, r1
 800187e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001880:	f7ff f900 	bl	8000a84 <HAL_GetTick>
 8001884:	0003      	movs	r3, r0
 8001886:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001888:	e009      	b.n	800189e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800188a:	f7ff f8fb 	bl	8000a84 <HAL_GetTick>
 800188e:	0002      	movs	r2, r0
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	4a8a      	ldr	r2, [pc, #552]	; (8001ac0 <HAL_RCC_ClockConfig+0x274>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d901      	bls.n	800189e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e109      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800189e:	4b87      	ldr	r3, [pc, #540]	; (8001abc <HAL_RCC_ClockConfig+0x270>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2201      	movs	r2, #1
 80018a4:	4013      	ands	r3, r2
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d1ee      	bne.n	800188a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2202      	movs	r2, #2
 80018b2:	4013      	ands	r3, r2
 80018b4:	d009      	beq.n	80018ca <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b6:	4b83      	ldr	r3, [pc, #524]	; (8001ac4 <HAL_RCC_ClockConfig+0x278>)
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	22f0      	movs	r2, #240	; 0xf0
 80018bc:	4393      	bics	r3, r2
 80018be:	0019      	movs	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	4b7f      	ldr	r3, [pc, #508]	; (8001ac4 <HAL_RCC_ClockConfig+0x278>)
 80018c6:	430a      	orrs	r2, r1
 80018c8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2201      	movs	r2, #1
 80018d0:	4013      	ands	r3, r2
 80018d2:	d100      	bne.n	80018d6 <HAL_RCC_ClockConfig+0x8a>
 80018d4:	e089      	b.n	80019ea <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d107      	bne.n	80018ee <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018de:	4b79      	ldr	r3, [pc, #484]	; (8001ac4 <HAL_RCC_ClockConfig+0x278>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	2380      	movs	r3, #128	; 0x80
 80018e4:	029b      	lsls	r3, r3, #10
 80018e6:	4013      	ands	r3, r2
 80018e8:	d120      	bne.n	800192c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e0e1      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b03      	cmp	r3, #3
 80018f4:	d107      	bne.n	8001906 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018f6:	4b73      	ldr	r3, [pc, #460]	; (8001ac4 <HAL_RCC_ClockConfig+0x278>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	2380      	movs	r3, #128	; 0x80
 80018fc:	049b      	lsls	r3, r3, #18
 80018fe:	4013      	ands	r3, r2
 8001900:	d114      	bne.n	800192c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e0d5      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d106      	bne.n	800191c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800190e:	4b6d      	ldr	r3, [pc, #436]	; (8001ac4 <HAL_RCC_ClockConfig+0x278>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2204      	movs	r2, #4
 8001914:	4013      	ands	r3, r2
 8001916:	d109      	bne.n	800192c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e0ca      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800191c:	4b69      	ldr	r3, [pc, #420]	; (8001ac4 <HAL_RCC_ClockConfig+0x278>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4013      	ands	r3, r2
 8001926:	d101      	bne.n	800192c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e0c2      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800192c:	4b65      	ldr	r3, [pc, #404]	; (8001ac4 <HAL_RCC_ClockConfig+0x278>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	2203      	movs	r2, #3
 8001932:	4393      	bics	r3, r2
 8001934:	0019      	movs	r1, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	4b62      	ldr	r3, [pc, #392]	; (8001ac4 <HAL_RCC_ClockConfig+0x278>)
 800193c:	430a      	orrs	r2, r1
 800193e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001940:	f7ff f8a0 	bl	8000a84 <HAL_GetTick>
 8001944:	0003      	movs	r3, r0
 8001946:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d111      	bne.n	8001974 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001950:	e009      	b.n	8001966 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001952:	f7ff f897 	bl	8000a84 <HAL_GetTick>
 8001956:	0002      	movs	r2, r0
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	4a58      	ldr	r2, [pc, #352]	; (8001ac0 <HAL_RCC_ClockConfig+0x274>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e0a5      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001966:	4b57      	ldr	r3, [pc, #348]	; (8001ac4 <HAL_RCC_ClockConfig+0x278>)
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	220c      	movs	r2, #12
 800196c:	4013      	ands	r3, r2
 800196e:	2b08      	cmp	r3, #8
 8001970:	d1ef      	bne.n	8001952 <HAL_RCC_ClockConfig+0x106>
 8001972:	e03a      	b.n	80019ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b03      	cmp	r3, #3
 800197a:	d111      	bne.n	80019a0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800197c:	e009      	b.n	8001992 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800197e:	f7ff f881 	bl	8000a84 <HAL_GetTick>
 8001982:	0002      	movs	r2, r0
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	4a4d      	ldr	r2, [pc, #308]	; (8001ac0 <HAL_RCC_ClockConfig+0x274>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e08f      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001992:	4b4c      	ldr	r3, [pc, #304]	; (8001ac4 <HAL_RCC_ClockConfig+0x278>)
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	220c      	movs	r2, #12
 8001998:	4013      	ands	r3, r2
 800199a:	2b0c      	cmp	r3, #12
 800199c:	d1ef      	bne.n	800197e <HAL_RCC_ClockConfig+0x132>
 800199e:	e024      	b.n	80019ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d11b      	bne.n	80019e0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80019a8:	e009      	b.n	80019be <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019aa:	f7ff f86b 	bl	8000a84 <HAL_GetTick>
 80019ae:	0002      	movs	r2, r0
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	4a42      	ldr	r2, [pc, #264]	; (8001ac0 <HAL_RCC_ClockConfig+0x274>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e079      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80019be:	4b41      	ldr	r3, [pc, #260]	; (8001ac4 <HAL_RCC_ClockConfig+0x278>)
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	220c      	movs	r2, #12
 80019c4:	4013      	ands	r3, r2
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	d1ef      	bne.n	80019aa <HAL_RCC_ClockConfig+0x15e>
 80019ca:	e00e      	b.n	80019ea <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019cc:	f7ff f85a 	bl	8000a84 <HAL_GetTick>
 80019d0:	0002      	movs	r2, r0
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	4a3a      	ldr	r2, [pc, #232]	; (8001ac0 <HAL_RCC_ClockConfig+0x274>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e068      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80019e0:	4b38      	ldr	r3, [pc, #224]	; (8001ac4 <HAL_RCC_ClockConfig+0x278>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	220c      	movs	r2, #12
 80019e6:	4013      	ands	r3, r2
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019ea:	4b34      	ldr	r3, [pc, #208]	; (8001abc <HAL_RCC_ClockConfig+0x270>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2201      	movs	r2, #1
 80019f0:	4013      	ands	r3, r2
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d21e      	bcs.n	8001a36 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f8:	4b30      	ldr	r3, [pc, #192]	; (8001abc <HAL_RCC_ClockConfig+0x270>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2201      	movs	r2, #1
 80019fe:	4393      	bics	r3, r2
 8001a00:	0019      	movs	r1, r3
 8001a02:	4b2e      	ldr	r3, [pc, #184]	; (8001abc <HAL_RCC_ClockConfig+0x270>)
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	430a      	orrs	r2, r1
 8001a08:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a0a:	f7ff f83b 	bl	8000a84 <HAL_GetTick>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a12:	e009      	b.n	8001a28 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a14:	f7ff f836 	bl	8000a84 <HAL_GetTick>
 8001a18:	0002      	movs	r2, r0
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	4a28      	ldr	r2, [pc, #160]	; (8001ac0 <HAL_RCC_ClockConfig+0x274>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e044      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a28:	4b24      	ldr	r3, [pc, #144]	; (8001abc <HAL_RCC_ClockConfig+0x270>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	4013      	ands	r3, r2
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d1ee      	bne.n	8001a14 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2204      	movs	r2, #4
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d009      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a40:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <HAL_RCC_ClockConfig+0x278>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	4a20      	ldr	r2, [pc, #128]	; (8001ac8 <HAL_RCC_ClockConfig+0x27c>)
 8001a46:	4013      	ands	r3, r2
 8001a48:	0019      	movs	r1, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <HAL_RCC_ClockConfig+0x278>)
 8001a50:	430a      	orrs	r2, r1
 8001a52:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2208      	movs	r2, #8
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d00a      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a5e:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <HAL_RCC_ClockConfig+0x278>)
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	4a1a      	ldr	r2, [pc, #104]	; (8001acc <HAL_RCC_ClockConfig+0x280>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	0019      	movs	r1, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	00da      	lsls	r2, r3, #3
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <HAL_RCC_ClockConfig+0x278>)
 8001a70:	430a      	orrs	r2, r1
 8001a72:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a74:	f000 f832 	bl	8001adc <HAL_RCC_GetSysClockFreq>
 8001a78:	0001      	movs	r1, r0
 8001a7a:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <HAL_RCC_ClockConfig+0x278>)
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	091b      	lsrs	r3, r3, #4
 8001a80:	220f      	movs	r2, #15
 8001a82:	4013      	ands	r3, r2
 8001a84:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <HAL_RCC_ClockConfig+0x284>)
 8001a86:	5cd3      	ldrb	r3, [r2, r3]
 8001a88:	000a      	movs	r2, r1
 8001a8a:	40da      	lsrs	r2, r3
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <HAL_RCC_ClockConfig+0x288>)
 8001a8e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <HAL_RCC_ClockConfig+0x28c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	250b      	movs	r5, #11
 8001a96:	197c      	adds	r4, r7, r5
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f7fe ffad 	bl	80009f8 <HAL_InitTick>
 8001a9e:	0003      	movs	r3, r0
 8001aa0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001aa2:	197b      	adds	r3, r7, r5
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d002      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001aaa:	197b      	adds	r3, r7, r5
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	e000      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	b004      	add	sp, #16
 8001ab8:	bdb0      	pop	{r4, r5, r7, pc}
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	40022000 	.word	0x40022000
 8001ac0:	00001388 	.word	0x00001388
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	fffff8ff 	.word	0xfffff8ff
 8001acc:	ffffc7ff 	.word	0xffffc7ff
 8001ad0:	08003610 	.word	0x08003610
 8001ad4:	20000000 	.word	0x20000000
 8001ad8:	20000004 	.word	0x20000004

08001adc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001adc:	b5b0      	push	{r4, r5, r7, lr}
 8001ade:	b08e      	sub	sp, #56	; 0x38
 8001ae0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001ae2:	4b4c      	ldr	r3, [pc, #304]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001aea:	230c      	movs	r3, #12
 8001aec:	4013      	ands	r3, r2
 8001aee:	2b0c      	cmp	r3, #12
 8001af0:	d014      	beq.n	8001b1c <HAL_RCC_GetSysClockFreq+0x40>
 8001af2:	d900      	bls.n	8001af6 <HAL_RCC_GetSysClockFreq+0x1a>
 8001af4:	e07b      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x112>
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d002      	beq.n	8001b00 <HAL_RCC_GetSysClockFreq+0x24>
 8001afa:	2b08      	cmp	r3, #8
 8001afc:	d00b      	beq.n	8001b16 <HAL_RCC_GetSysClockFreq+0x3a>
 8001afe:	e076      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001b00:	4b44      	ldr	r3, [pc, #272]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2210      	movs	r2, #16
 8001b06:	4013      	ands	r3, r2
 8001b08:	d002      	beq.n	8001b10 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001b0a:	4b43      	ldr	r3, [pc, #268]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001b0c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001b0e:	e07c      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001b10:	4b42      	ldr	r3, [pc, #264]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x140>)
 8001b12:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b14:	e079      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b16:	4b42      	ldr	r3, [pc, #264]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x144>)
 8001b18:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b1a:	e076      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b1e:	0c9a      	lsrs	r2, r3, #18
 8001b20:	230f      	movs	r3, #15
 8001b22:	401a      	ands	r2, r3
 8001b24:	4b3f      	ldr	r3, [pc, #252]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x148>)
 8001b26:	5c9b      	ldrb	r3, [r3, r2]
 8001b28:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b2c:	0d9a      	lsrs	r2, r3, #22
 8001b2e:	2303      	movs	r3, #3
 8001b30:	4013      	ands	r3, r2
 8001b32:	3301      	adds	r3, #1
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b36:	4b37      	ldr	r3, [pc, #220]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b38:	68da      	ldr	r2, [r3, #12]
 8001b3a:	2380      	movs	r3, #128	; 0x80
 8001b3c:	025b      	lsls	r3, r3, #9
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d01a      	beq.n	8001b78 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b44:	61bb      	str	r3, [r7, #24]
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
 8001b4a:	4a35      	ldr	r2, [pc, #212]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x144>)
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	69b8      	ldr	r0, [r7, #24]
 8001b50:	69f9      	ldr	r1, [r7, #28]
 8001b52:	f7fe fb85 	bl	8000260 <__aeabi_lmul>
 8001b56:	0002      	movs	r2, r0
 8001b58:	000b      	movs	r3, r1
 8001b5a:	0010      	movs	r0, r2
 8001b5c:	0019      	movs	r1, r3
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	f7fe fb59 	bl	8000220 <__aeabi_uldivmod>
 8001b6e:	0002      	movs	r2, r0
 8001b70:	000b      	movs	r3, r1
 8001b72:	0013      	movs	r3, r2
 8001b74:	637b      	str	r3, [r7, #52]	; 0x34
 8001b76:	e037      	b.n	8001be8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001b78:	4b26      	ldr	r3, [pc, #152]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2210      	movs	r2, #16
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d01a      	beq.n	8001bb8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4a23      	ldr	r2, [pc, #140]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	68b8      	ldr	r0, [r7, #8]
 8001b90:	68f9      	ldr	r1, [r7, #12]
 8001b92:	f7fe fb65 	bl	8000260 <__aeabi_lmul>
 8001b96:	0002      	movs	r2, r0
 8001b98:	000b      	movs	r3, r1
 8001b9a:	0010      	movs	r0, r2
 8001b9c:	0019      	movs	r1, r3
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	603b      	str	r3, [r7, #0]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f7fe fb39 	bl	8000220 <__aeabi_uldivmod>
 8001bae:	0002      	movs	r2, r0
 8001bb0:	000b      	movs	r3, r1
 8001bb2:	0013      	movs	r3, r2
 8001bb4:	637b      	str	r3, [r7, #52]	; 0x34
 8001bb6:	e017      	b.n	8001be8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bba:	0018      	movs	r0, r3
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	0019      	movs	r1, r3
 8001bc0:	4a16      	ldr	r2, [pc, #88]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x140>)
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f7fe fb4c 	bl	8000260 <__aeabi_lmul>
 8001bc8:	0002      	movs	r2, r0
 8001bca:	000b      	movs	r3, r1
 8001bcc:	0010      	movs	r0, r2
 8001bce:	0019      	movs	r1, r3
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	001c      	movs	r4, r3
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	001d      	movs	r5, r3
 8001bd8:	0022      	movs	r2, r4
 8001bda:	002b      	movs	r3, r5
 8001bdc:	f7fe fb20 	bl	8000220 <__aeabi_uldivmod>
 8001be0:	0002      	movs	r2, r0
 8001be2:	000b      	movs	r3, r1
 8001be4:	0013      	movs	r3, r2
 8001be6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bec:	e00d      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x138>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	0b5b      	lsrs	r3, r3, #13
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001bfa:	6a3b      	ldr	r3, [r7, #32]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	2280      	movs	r2, #128	; 0x80
 8001c00:	0212      	lsls	r2, r2, #8
 8001c02:	409a      	lsls	r2, r3
 8001c04:	0013      	movs	r3, r2
 8001c06:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c08:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	b00e      	add	sp, #56	; 0x38
 8001c12:	bdb0      	pop	{r4, r5, r7, pc}
 8001c14:	40021000 	.word	0x40021000
 8001c18:	003d0900 	.word	0x003d0900
 8001c1c:	00f42400 	.word	0x00f42400
 8001c20:	007a1200 	.word	0x007a1200
 8001c24:	08003628 	.word	0x08003628

08001c28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c2c:	4b02      	ldr	r3, [pc, #8]	; (8001c38 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
}
 8001c30:	0018      	movs	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	20000000 	.word	0x20000000

08001c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c40:	f7ff fff2 	bl	8001c28 <HAL_RCC_GetHCLKFreq>
 8001c44:	0001      	movs	r1, r0
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	0a1b      	lsrs	r3, r3, #8
 8001c4c:	2207      	movs	r2, #7
 8001c4e:	4013      	ands	r3, r2
 8001c50:	4a04      	ldr	r2, [pc, #16]	; (8001c64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c52:	5cd3      	ldrb	r3, [r2, r3]
 8001c54:	40d9      	lsrs	r1, r3
 8001c56:	000b      	movs	r3, r1
}
 8001c58:	0018      	movs	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	40021000 	.word	0x40021000
 8001c64:	08003620 	.word	0x08003620

08001c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c6c:	f7ff ffdc 	bl	8001c28 <HAL_RCC_GetHCLKFreq>
 8001c70:	0001      	movs	r1, r0
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	0adb      	lsrs	r3, r3, #11
 8001c78:	2207      	movs	r2, #7
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	4a04      	ldr	r2, [pc, #16]	; (8001c90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c7e:	5cd3      	ldrb	r3, [r2, r3]
 8001c80:	40d9      	lsrs	r1, r3
 8001c82:	000b      	movs	r3, r1
}
 8001c84:	0018      	movs	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	08003620 	.word	0x08003620

08001c94 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001c9c:	2017      	movs	r0, #23
 8001c9e:	183b      	adds	r3, r7, r0
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2220      	movs	r2, #32
 8001caa:	4013      	ands	r3, r2
 8001cac:	d100      	bne.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001cae:	e0c7      	b.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cb0:	4b84      	ldr	r3, [pc, #528]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001cb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cb4:	2380      	movs	r3, #128	; 0x80
 8001cb6:	055b      	lsls	r3, r3, #21
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d109      	bne.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cbc:	4b81      	ldr	r3, [pc, #516]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001cbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cc0:	4b80      	ldr	r3, [pc, #512]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001cc2:	2180      	movs	r1, #128	; 0x80
 8001cc4:	0549      	lsls	r1, r1, #21
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001cca:	183b      	adds	r3, r7, r0
 8001ccc:	2201      	movs	r2, #1
 8001cce:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd0:	4b7d      	ldr	r3, [pc, #500]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d11a      	bne.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cdc:	4b7a      	ldr	r3, [pc, #488]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4b79      	ldr	r3, [pc, #484]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001ce2:	2180      	movs	r1, #128	; 0x80
 8001ce4:	0049      	lsls	r1, r1, #1
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cea:	f7fe fecb 	bl	8000a84 <HAL_GetTick>
 8001cee:	0003      	movs	r3, r0
 8001cf0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf2:	e008      	b.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf4:	f7fe fec6 	bl	8000a84 <HAL_GetTick>
 8001cf8:	0002      	movs	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b64      	cmp	r3, #100	; 0x64
 8001d00:	d901      	bls.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e0d9      	b.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d06:	4b70      	ldr	r3, [pc, #448]	; (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	2380      	movs	r3, #128	; 0x80
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001d12:	4b6c      	ldr	r3, [pc, #432]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	23c0      	movs	r3, #192	; 0xc0
 8001d18:	039b      	lsls	r3, r3, #14
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	23c0      	movs	r3, #192	; 0xc0
 8001d24:	039b      	lsls	r3, r3, #14
 8001d26:	4013      	ands	r3, r2
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d013      	beq.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	23c0      	movs	r3, #192	; 0xc0
 8001d34:	029b      	lsls	r3, r3, #10
 8001d36:	401a      	ands	r2, r3
 8001d38:	23c0      	movs	r3, #192	; 0xc0
 8001d3a:	029b      	lsls	r3, r3, #10
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d10a      	bne.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001d40:	4b60      	ldr	r3, [pc, #384]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	2380      	movs	r3, #128	; 0x80
 8001d46:	029b      	lsls	r3, r3, #10
 8001d48:	401a      	ands	r2, r3
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	029b      	lsls	r3, r3, #10
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d101      	bne.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e0b1      	b.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001d56:	4b5b      	ldr	r3, [pc, #364]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d5a:	23c0      	movs	r3, #192	; 0xc0
 8001d5c:	029b      	lsls	r3, r3, #10
 8001d5e:	4013      	ands	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d03b      	beq.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	23c0      	movs	r3, #192	; 0xc0
 8001d6e:	029b      	lsls	r3, r3, #10
 8001d70:	4013      	ands	r3, r2
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d033      	beq.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2220      	movs	r2, #32
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d02e      	beq.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001d82:	4b50      	ldr	r3, [pc, #320]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d86:	4a51      	ldr	r2, [pc, #324]	; (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d8c:	4b4d      	ldr	r3, [pc, #308]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d90:	4b4c      	ldr	r3, [pc, #304]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d92:	2180      	movs	r1, #128	; 0x80
 8001d94:	0309      	lsls	r1, r1, #12
 8001d96:	430a      	orrs	r2, r1
 8001d98:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d9a:	4b4a      	ldr	r3, [pc, #296]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d9e:	4b49      	ldr	r3, [pc, #292]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001da0:	494b      	ldr	r1, [pc, #300]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001da2:	400a      	ands	r2, r1
 8001da4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001da6:	4b47      	ldr	r3, [pc, #284]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	2380      	movs	r3, #128	; 0x80
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4013      	ands	r3, r2
 8001db4:	d014      	beq.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db6:	f7fe fe65 	bl	8000a84 <HAL_GetTick>
 8001dba:	0003      	movs	r3, r0
 8001dbc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dbe:	e009      	b.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dc0:	f7fe fe60 	bl	8000a84 <HAL_GetTick>
 8001dc4:	0002      	movs	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	4a42      	ldr	r2, [pc, #264]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e072      	b.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dd4:	4b3b      	ldr	r3, [pc, #236]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001dd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dd8:	2380      	movs	r3, #128	; 0x80
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d0ef      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2220      	movs	r2, #32
 8001de6:	4013      	ands	r3, r2
 8001de8:	d01f      	beq.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	23c0      	movs	r3, #192	; 0xc0
 8001df0:	029b      	lsls	r3, r3, #10
 8001df2:	401a      	ands	r2, r3
 8001df4:	23c0      	movs	r3, #192	; 0xc0
 8001df6:	029b      	lsls	r3, r3, #10
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d10c      	bne.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8001dfc:	4b31      	ldr	r3, [pc, #196]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a35      	ldr	r2, [pc, #212]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	0019      	movs	r1, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	23c0      	movs	r3, #192	; 0xc0
 8001e0c:	039b      	lsls	r3, r3, #14
 8001e0e:	401a      	ands	r2, r3
 8001e10:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e12:	430a      	orrs	r2, r1
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	4b2b      	ldr	r3, [pc, #172]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e18:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	23c0      	movs	r3, #192	; 0xc0
 8001e20:	029b      	lsls	r3, r3, #10
 8001e22:	401a      	ands	r2, r3
 8001e24:	4b27      	ldr	r3, [pc, #156]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e26:	430a      	orrs	r2, r1
 8001e28:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e2a:	2317      	movs	r3, #23
 8001e2c:	18fb      	adds	r3, r7, r3
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d105      	bne.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e34:	4b23      	ldr	r3, [pc, #140]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e38:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e3a:	4928      	ldr	r1, [pc, #160]	; (8001edc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e3c:	400a      	ands	r2, r1
 8001e3e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2202      	movs	r2, #2
 8001e46:	4013      	ands	r3, r2
 8001e48:	d009      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e4a:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4e:	220c      	movs	r2, #12
 8001e50:	4393      	bics	r3, r2
 8001e52:	0019      	movs	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	4b1a      	ldr	r3, [pc, #104]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2204      	movs	r2, #4
 8001e64:	4013      	ands	r3, r2
 8001e66:	d009      	beq.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e68:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6c:	4a1c      	ldr	r2, [pc, #112]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001e6e:	4013      	ands	r3, r2
 8001e70:	0019      	movs	r1, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68da      	ldr	r2, [r3, #12]
 8001e76:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2208      	movs	r2, #8
 8001e82:	4013      	ands	r3, r2
 8001e84:	d009      	beq.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8a:	4a16      	ldr	r2, [pc, #88]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	0019      	movs	r1, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691a      	ldr	r2, [r3, #16]
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e96:	430a      	orrs	r2, r1
 8001e98:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2280      	movs	r2, #128	; 0x80
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d009      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001ea4:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea8:	4a0f      	ldr	r2, [pc, #60]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	0019      	movs	r1, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	0018      	movs	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	b006      	add	sp, #24
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	fffcffff 	.word	0xfffcffff
 8001ed0:	fff7ffff 	.word	0xfff7ffff
 8001ed4:	00001388 	.word	0x00001388
 8001ed8:	ffcfffff 	.word	0xffcfffff
 8001edc:	efffffff 	.word	0xefffffff
 8001ee0:	fffff3ff 	.word	0xfffff3ff
 8001ee4:	ffffcfff 	.word	0xffffcfff
 8001ee8:	fff3ffff 	.word	0xfff3ffff

08001eec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e032      	b.n	8001f64 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2239      	movs	r2, #57	; 0x39
 8001f02:	5c9b      	ldrb	r3, [r3, r2]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d107      	bne.n	8001f1a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2238      	movs	r2, #56	; 0x38
 8001f0e:	2100      	movs	r1, #0
 8001f10:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	0018      	movs	r0, r3
 8001f16:	f7fe fc77 	bl	8000808 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2239      	movs	r2, #57	; 0x39
 8001f1e:	2102      	movs	r1, #2
 8001f20:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	0019      	movs	r1, r3
 8001f2c:	0010      	movs	r0, r2
 8001f2e:	f000 f93d 	bl	80021ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	223e      	movs	r2, #62	; 0x3e
 8001f36:	2101      	movs	r1, #1
 8001f38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	223a      	movs	r2, #58	; 0x3a
 8001f3e:	2101      	movs	r1, #1
 8001f40:	5499      	strb	r1, [r3, r2]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	223b      	movs	r2, #59	; 0x3b
 8001f46:	2101      	movs	r1, #1
 8001f48:	5499      	strb	r1, [r3, r2]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	223c      	movs	r2, #60	; 0x3c
 8001f4e:	2101      	movs	r1, #1
 8001f50:	5499      	strb	r1, [r3, r2]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	223d      	movs	r2, #61	; 0x3d
 8001f56:	2101      	movs	r1, #1
 8001f58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2239      	movs	r2, #57	; 0x39
 8001f5e:	2101      	movs	r1, #1
 8001f60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	0018      	movs	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	b002      	add	sp, #8
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2239      	movs	r2, #57	; 0x39
 8001f78:	5c9b      	ldrb	r3, [r3, r2]
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d001      	beq.n	8001f84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e036      	b.n	8001ff2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2239      	movs	r2, #57	; 0x39
 8001f88:	2102      	movs	r1, #2
 8001f8a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2101      	movs	r1, #1
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	05db      	lsls	r3, r3, #23
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d009      	beq.n	8001fbc <HAL_TIM_Base_Start_IT+0x50>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a13      	ldr	r2, [pc, #76]	; (8001ffc <HAL_TIM_Base_Start_IT+0x90>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d004      	beq.n	8001fbc <HAL_TIM_Base_Start_IT+0x50>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a12      	ldr	r2, [pc, #72]	; (8002000 <HAL_TIM_Base_Start_IT+0x94>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d111      	bne.n	8001fe0 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	2207      	movs	r2, #7
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2b06      	cmp	r3, #6
 8001fcc:	d010      	beq.n	8001ff0 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2101      	movs	r1, #1
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fde:	e007      	b.n	8001ff0 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2101      	movs	r1, #1
 8001fec:	430a      	orrs	r2, r1
 8001fee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	b004      	add	sp, #16
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	40010800 	.word	0x40010800
 8002000:	40011400 	.word	0x40011400

08002004 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800200e:	230f      	movs	r3, #15
 8002010:	18fb      	adds	r3, r7, r3
 8002012:	2200      	movs	r2, #0
 8002014:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2238      	movs	r2, #56	; 0x38
 800201a:	5c9b      	ldrb	r3, [r3, r2]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d101      	bne.n	8002024 <HAL_TIM_ConfigClockSource+0x20>
 8002020:	2302      	movs	r3, #2
 8002022:	e0bc      	b.n	800219e <HAL_TIM_ConfigClockSource+0x19a>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2238      	movs	r2, #56	; 0x38
 8002028:	2101      	movs	r1, #1
 800202a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2239      	movs	r2, #57	; 0x39
 8002030:	2102      	movs	r1, #2
 8002032:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2277      	movs	r2, #119	; 0x77
 8002040:	4393      	bics	r3, r2
 8002042:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	4a58      	ldr	r2, [pc, #352]	; (80021a8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002048:	4013      	ands	r3, r2
 800204a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68ba      	ldr	r2, [r7, #8]
 8002052:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2280      	movs	r2, #128	; 0x80
 800205a:	0192      	lsls	r2, r2, #6
 800205c:	4293      	cmp	r3, r2
 800205e:	d040      	beq.n	80020e2 <HAL_TIM_ConfigClockSource+0xde>
 8002060:	2280      	movs	r2, #128	; 0x80
 8002062:	0192      	lsls	r2, r2, #6
 8002064:	4293      	cmp	r3, r2
 8002066:	d900      	bls.n	800206a <HAL_TIM_ConfigClockSource+0x66>
 8002068:	e088      	b.n	800217c <HAL_TIM_ConfigClockSource+0x178>
 800206a:	2280      	movs	r2, #128	; 0x80
 800206c:	0152      	lsls	r2, r2, #5
 800206e:	4293      	cmp	r3, r2
 8002070:	d100      	bne.n	8002074 <HAL_TIM_ConfigClockSource+0x70>
 8002072:	e088      	b.n	8002186 <HAL_TIM_ConfigClockSource+0x182>
 8002074:	2280      	movs	r2, #128	; 0x80
 8002076:	0152      	lsls	r2, r2, #5
 8002078:	4293      	cmp	r3, r2
 800207a:	d900      	bls.n	800207e <HAL_TIM_ConfigClockSource+0x7a>
 800207c:	e07e      	b.n	800217c <HAL_TIM_ConfigClockSource+0x178>
 800207e:	2b70      	cmp	r3, #112	; 0x70
 8002080:	d018      	beq.n	80020b4 <HAL_TIM_ConfigClockSource+0xb0>
 8002082:	d900      	bls.n	8002086 <HAL_TIM_ConfigClockSource+0x82>
 8002084:	e07a      	b.n	800217c <HAL_TIM_ConfigClockSource+0x178>
 8002086:	2b60      	cmp	r3, #96	; 0x60
 8002088:	d04f      	beq.n	800212a <HAL_TIM_ConfigClockSource+0x126>
 800208a:	d900      	bls.n	800208e <HAL_TIM_ConfigClockSource+0x8a>
 800208c:	e076      	b.n	800217c <HAL_TIM_ConfigClockSource+0x178>
 800208e:	2b50      	cmp	r3, #80	; 0x50
 8002090:	d03b      	beq.n	800210a <HAL_TIM_ConfigClockSource+0x106>
 8002092:	d900      	bls.n	8002096 <HAL_TIM_ConfigClockSource+0x92>
 8002094:	e072      	b.n	800217c <HAL_TIM_ConfigClockSource+0x178>
 8002096:	2b40      	cmp	r3, #64	; 0x40
 8002098:	d057      	beq.n	800214a <HAL_TIM_ConfigClockSource+0x146>
 800209a:	d900      	bls.n	800209e <HAL_TIM_ConfigClockSource+0x9a>
 800209c:	e06e      	b.n	800217c <HAL_TIM_ConfigClockSource+0x178>
 800209e:	2b30      	cmp	r3, #48	; 0x30
 80020a0:	d063      	beq.n	800216a <HAL_TIM_ConfigClockSource+0x166>
 80020a2:	d86b      	bhi.n	800217c <HAL_TIM_ConfigClockSource+0x178>
 80020a4:	2b20      	cmp	r3, #32
 80020a6:	d060      	beq.n	800216a <HAL_TIM_ConfigClockSource+0x166>
 80020a8:	d868      	bhi.n	800217c <HAL_TIM_ConfigClockSource+0x178>
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d05d      	beq.n	800216a <HAL_TIM_ConfigClockSource+0x166>
 80020ae:	2b10      	cmp	r3, #16
 80020b0:	d05b      	beq.n	800216a <HAL_TIM_ConfigClockSource+0x166>
 80020b2:	e063      	b.n	800217c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6818      	ldr	r0, [r3, #0]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	6899      	ldr	r1, [r3, #8]
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f000 f940 	bl	8002348 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	2277      	movs	r2, #119	; 0x77
 80020d4:	4313      	orrs	r3, r2
 80020d6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	609a      	str	r2, [r3, #8]
      break;
 80020e0:	e052      	b.n	8002188 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6818      	ldr	r0, [r3, #0]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	6899      	ldr	r1, [r3, #8]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	f000 f929 	bl	8002348 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2180      	movs	r1, #128	; 0x80
 8002102:	01c9      	lsls	r1, r1, #7
 8002104:	430a      	orrs	r2, r1
 8002106:	609a      	str	r2, [r3, #8]
      break;
 8002108:	e03e      	b.n	8002188 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	6859      	ldr	r1, [r3, #4]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	001a      	movs	r2, r3
 8002118:	f000 f89c 	bl	8002254 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2150      	movs	r1, #80	; 0x50
 8002122:	0018      	movs	r0, r3
 8002124:	f000 f8f6 	bl	8002314 <TIM_ITRx_SetConfig>
      break;
 8002128:	e02e      	b.n	8002188 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	6859      	ldr	r1, [r3, #4]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	001a      	movs	r2, r3
 8002138:	f000 f8ba 	bl	80022b0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2160      	movs	r1, #96	; 0x60
 8002142:	0018      	movs	r0, r3
 8002144:	f000 f8e6 	bl	8002314 <TIM_ITRx_SetConfig>
      break;
 8002148:	e01e      	b.n	8002188 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6818      	ldr	r0, [r3, #0]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	6859      	ldr	r1, [r3, #4]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	001a      	movs	r2, r3
 8002158:	f000 f87c 	bl	8002254 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2140      	movs	r1, #64	; 0x40
 8002162:	0018      	movs	r0, r3
 8002164:	f000 f8d6 	bl	8002314 <TIM_ITRx_SetConfig>
      break;
 8002168:	e00e      	b.n	8002188 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	0019      	movs	r1, r3
 8002174:	0010      	movs	r0, r2
 8002176:	f000 f8cd 	bl	8002314 <TIM_ITRx_SetConfig>
      break;
 800217a:	e005      	b.n	8002188 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800217c:	230f      	movs	r3, #15
 800217e:	18fb      	adds	r3, r7, r3
 8002180:	2201      	movs	r2, #1
 8002182:	701a      	strb	r2, [r3, #0]
      break;
 8002184:	e000      	b.n	8002188 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002186:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2239      	movs	r2, #57	; 0x39
 800218c:	2101      	movs	r1, #1
 800218e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2238      	movs	r2, #56	; 0x38
 8002194:	2100      	movs	r1, #0
 8002196:	5499      	strb	r1, [r3, r2]

  return status;
 8002198:	230f      	movs	r3, #15
 800219a:	18fb      	adds	r3, r7, r3
 800219c:	781b      	ldrb	r3, [r3, #0]
}
 800219e:	0018      	movs	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	b004      	add	sp, #16
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	ffff00ff 	.word	0xffff00ff

080021ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	05db      	lsls	r3, r3, #23
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d007      	beq.n	80021d6 <TIM_Base_SetConfig+0x2a>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a1f      	ldr	r2, [pc, #124]	; (8002248 <TIM_Base_SetConfig+0x9c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d003      	beq.n	80021d6 <TIM_Base_SetConfig+0x2a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a1e      	ldr	r2, [pc, #120]	; (800224c <TIM_Base_SetConfig+0xa0>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d108      	bne.n	80021e8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2270      	movs	r2, #112	; 0x70
 80021da:	4393      	bics	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	2380      	movs	r3, #128	; 0x80
 80021ec:	05db      	lsls	r3, r3, #23
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d007      	beq.n	8002202 <TIM_Base_SetConfig+0x56>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a14      	ldr	r2, [pc, #80]	; (8002248 <TIM_Base_SetConfig+0x9c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d003      	beq.n	8002202 <TIM_Base_SetConfig+0x56>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a13      	ldr	r2, [pc, #76]	; (800224c <TIM_Base_SetConfig+0xa0>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d108      	bne.n	8002214 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4a12      	ldr	r2, [pc, #72]	; (8002250 <TIM_Base_SetConfig+0xa4>)
 8002206:	4013      	ands	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4313      	orrs	r3, r2
 8002212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2280      	movs	r2, #128	; 0x80
 8002218:	4393      	bics	r3, r2
 800221a:	001a      	movs	r2, r3
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	615a      	str	r2, [r3, #20]
}
 8002240:	46c0      	nop			; (mov r8, r8)
 8002242:	46bd      	mov	sp, r7
 8002244:	b004      	add	sp, #16
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40010800 	.word	0x40010800
 800224c:	40011400 	.word	0x40011400
 8002250:	fffffcff 	.word	0xfffffcff

08002254 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	2201      	movs	r2, #1
 800226c:	4393      	bics	r3, r2
 800226e:	001a      	movs	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	22f0      	movs	r2, #240	; 0xf0
 800227e:	4393      	bics	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	011b      	lsls	r3, r3, #4
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	220a      	movs	r2, #10
 8002290:	4393      	bics	r3, r2
 8002292:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	4313      	orrs	r3, r2
 800229a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	621a      	str	r2, [r3, #32]
}
 80022a8:	46c0      	nop			; (mov r8, r8)
 80022aa:	46bd      	mov	sp, r7
 80022ac:	b006      	add	sp, #24
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	2210      	movs	r2, #16
 80022c2:	4393      	bics	r3, r2
 80022c4:	001a      	movs	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	4a0d      	ldr	r2, [pc, #52]	; (8002310 <TIM_TI2_ConfigInputStage+0x60>)
 80022da:	4013      	ands	r3, r2
 80022dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	031b      	lsls	r3, r3, #12
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	22a0      	movs	r2, #160	; 0xa0
 80022ec:	4393      	bics	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	621a      	str	r2, [r3, #32]
}
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	46bd      	mov	sp, r7
 800230a:	b006      	add	sp, #24
 800230c:	bd80      	pop	{r7, pc}
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	ffff0fff 	.word	0xffff0fff

08002314 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2270      	movs	r2, #112	; 0x70
 8002328:	4393      	bics	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	4313      	orrs	r3, r2
 8002332:	2207      	movs	r2, #7
 8002334:	4313      	orrs	r3, r2
 8002336:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	609a      	str	r2, [r3, #8]
}
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	46bd      	mov	sp, r7
 8002342:	b004      	add	sp, #16
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
 8002354:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	4a09      	ldr	r2, [pc, #36]	; (8002384 <TIM_ETR_SetConfig+0x3c>)
 8002360:	4013      	ands	r3, r2
 8002362:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	021a      	lsls	r2, r3, #8
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	431a      	orrs	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	4313      	orrs	r3, r2
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	4313      	orrs	r3, r2
 8002374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	609a      	str	r2, [r3, #8]
}
 800237c:	46c0      	nop			; (mov r8, r8)
 800237e:	46bd      	mov	sp, r7
 8002380:	b006      	add	sp, #24
 8002382:	bd80      	pop	{r7, pc}
 8002384:	ffff00ff 	.word	0xffff00ff

08002388 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2238      	movs	r2, #56	; 0x38
 8002396:	5c9b      	ldrb	r3, [r3, r2]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800239c:	2302      	movs	r3, #2
 800239e:	e042      	b.n	8002426 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2238      	movs	r2, #56	; 0x38
 80023a4:	2101      	movs	r1, #1
 80023a6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2239      	movs	r2, #57	; 0x39
 80023ac:	2102      	movs	r1, #2
 80023ae:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2270      	movs	r2, #112	; 0x70
 80023c4:	4393      	bics	r3, r2
 80023c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	05db      	lsls	r3, r3, #23
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d009      	beq.n	80023fa <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a11      	ldr	r2, [pc, #68]	; (8002430 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d004      	beq.n	80023fa <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a0f      	ldr	r2, [pc, #60]	; (8002434 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d10c      	bne.n	8002414 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2280      	movs	r2, #128	; 0x80
 80023fe:	4393      	bics	r3, r2
 8002400:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	4313      	orrs	r3, r2
 800240a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2239      	movs	r2, #57	; 0x39
 8002418:	2101      	movs	r1, #1
 800241a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2238      	movs	r2, #56	; 0x38
 8002420:	2100      	movs	r1, #0
 8002422:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	0018      	movs	r0, r3
 8002428:	46bd      	mov	sp, r7
 800242a:	b004      	add	sp, #16
 800242c:	bd80      	pop	{r7, pc}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	40010800 	.word	0x40010800
 8002434:	40011400 	.word	0x40011400

08002438 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e044      	b.n	80024d4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800244e:	2b00      	cmp	r3, #0
 8002450:	d107      	bne.n	8002462 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2278      	movs	r2, #120	; 0x78
 8002456:	2100      	movs	r1, #0
 8002458:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	0018      	movs	r0, r3
 800245e:	f7fe f9e9 	bl	8000834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2224      	movs	r2, #36	; 0x24
 8002466:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2101      	movs	r1, #1
 8002474:	438a      	bics	r2, r1
 8002476:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	0018      	movs	r0, r3
 800247c:	f000 fbce 	bl	8002c1c <UART_SetConfig>
 8002480:	0003      	movs	r3, r0
 8002482:	2b01      	cmp	r3, #1
 8002484:	d101      	bne.n	800248a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e024      	b.n	80024d4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	0018      	movs	r0, r3
 8002496:	f000 fe0b 	bl	80030b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	490d      	ldr	r1, [pc, #52]	; (80024dc <HAL_UART_Init+0xa4>)
 80024a6:	400a      	ands	r2, r1
 80024a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	212a      	movs	r1, #42	; 0x2a
 80024b6:	438a      	bics	r2, r1
 80024b8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2101      	movs	r1, #1
 80024c6:	430a      	orrs	r2, r1
 80024c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	0018      	movs	r0, r3
 80024ce:	f000 fea3 	bl	8003218 <UART_CheckIdleState>
 80024d2:	0003      	movs	r3, r0
}
 80024d4:	0018      	movs	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b002      	add	sp, #8
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	ffffb7ff 	.word	0xffffb7ff

080024e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08a      	sub	sp, #40	; 0x28
 80024e4:	af02      	add	r7, sp, #8
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	603b      	str	r3, [r7, #0]
 80024ec:	1dbb      	adds	r3, r7, #6
 80024ee:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024f4:	2b20      	cmp	r3, #32
 80024f6:	d000      	beq.n	80024fa <HAL_UART_Transmit+0x1a>
 80024f8:	e08c      	b.n	8002614 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_UART_Transmit+0x28>
 8002500:	1dbb      	adds	r3, r7, #6
 8002502:	881b      	ldrh	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e084      	b.n	8002616 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	2380      	movs	r3, #128	; 0x80
 8002512:	015b      	lsls	r3, r3, #5
 8002514:	429a      	cmp	r2, r3
 8002516:	d109      	bne.n	800252c <HAL_UART_Transmit+0x4c>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d105      	bne.n	800252c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2201      	movs	r2, #1
 8002524:	4013      	ands	r3, r2
 8002526:	d001      	beq.n	800252c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e074      	b.n	8002616 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2284      	movs	r2, #132	; 0x84
 8002530:	2100      	movs	r1, #0
 8002532:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2221      	movs	r2, #33	; 0x21
 8002538:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800253a:	f7fe faa3 	bl	8000a84 <HAL_GetTick>
 800253e:	0003      	movs	r3, r0
 8002540:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	1dba      	adds	r2, r7, #6
 8002546:	2150      	movs	r1, #80	; 0x50
 8002548:	8812      	ldrh	r2, [r2, #0]
 800254a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	1dba      	adds	r2, r7, #6
 8002550:	2152      	movs	r1, #82	; 0x52
 8002552:	8812      	ldrh	r2, [r2, #0]
 8002554:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	2380      	movs	r3, #128	; 0x80
 800255c:	015b      	lsls	r3, r3, #5
 800255e:	429a      	cmp	r2, r3
 8002560:	d108      	bne.n	8002574 <HAL_UART_Transmit+0x94>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d104      	bne.n	8002574 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	61bb      	str	r3, [r7, #24]
 8002572:	e003      	b.n	800257c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002578:	2300      	movs	r3, #0
 800257a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800257c:	e02f      	b.n	80025de <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	0013      	movs	r3, r2
 8002588:	2200      	movs	r2, #0
 800258a:	2180      	movs	r1, #128	; 0x80
 800258c:	f000 feec 	bl	8003368 <UART_WaitOnFlagUntilTimeout>
 8002590:	1e03      	subs	r3, r0, #0
 8002592:	d004      	beq.n	800259e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2220      	movs	r2, #32
 8002598:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e03b      	b.n	8002616 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10b      	bne.n	80025bc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	001a      	movs	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	05d2      	lsls	r2, r2, #23
 80025b0:	0dd2      	lsrs	r2, r2, #23
 80025b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	3302      	adds	r3, #2
 80025b8:	61bb      	str	r3, [r7, #24]
 80025ba:	e007      	b.n	80025cc <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	781a      	ldrb	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	3301      	adds	r3, #1
 80025ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2252      	movs	r2, #82	; 0x52
 80025d0:	5a9b      	ldrh	r3, [r3, r2]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	3b01      	subs	r3, #1
 80025d6:	b299      	uxth	r1, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2252      	movs	r2, #82	; 0x52
 80025dc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2252      	movs	r2, #82	; 0x52
 80025e2:	5a9b      	ldrh	r3, [r3, r2]
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1c9      	bne.n	800257e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	0013      	movs	r3, r2
 80025f4:	2200      	movs	r2, #0
 80025f6:	2140      	movs	r1, #64	; 0x40
 80025f8:	f000 feb6 	bl	8003368 <UART_WaitOnFlagUntilTimeout>
 80025fc:	1e03      	subs	r3, r0, #0
 80025fe:	d004      	beq.n	800260a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2220      	movs	r2, #32
 8002604:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e005      	b.n	8002616 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2220      	movs	r2, #32
 800260e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002610:	2300      	movs	r3, #0
 8002612:	e000      	b.n	8002616 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002614:	2302      	movs	r3, #2
  }
}
 8002616:	0018      	movs	r0, r3
 8002618:	46bd      	mov	sp, r7
 800261a:	b008      	add	sp, #32
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002620:	b590      	push	{r4, r7, lr}
 8002622:	b0ab      	sub	sp, #172	; 0xac
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	22a4      	movs	r2, #164	; 0xa4
 8002630:	18b9      	adds	r1, r7, r2
 8002632:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	20a0      	movs	r0, #160	; 0xa0
 800263c:	1839      	adds	r1, r7, r0
 800263e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	219c      	movs	r1, #156	; 0x9c
 8002648:	1879      	adds	r1, r7, r1
 800264a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800264c:	0011      	movs	r1, r2
 800264e:	18bb      	adds	r3, r7, r2
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a99      	ldr	r2, [pc, #612]	; (80028b8 <HAL_UART_IRQHandler+0x298>)
 8002654:	4013      	ands	r3, r2
 8002656:	2298      	movs	r2, #152	; 0x98
 8002658:	18bc      	adds	r4, r7, r2
 800265a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800265c:	18bb      	adds	r3, r7, r2
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d114      	bne.n	800268e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002664:	187b      	adds	r3, r7, r1
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2220      	movs	r2, #32
 800266a:	4013      	ands	r3, r2
 800266c:	d00f      	beq.n	800268e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800266e:	183b      	adds	r3, r7, r0
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2220      	movs	r2, #32
 8002674:	4013      	ands	r3, r2
 8002676:	d00a      	beq.n	800268e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800267c:	2b00      	cmp	r3, #0
 800267e:	d100      	bne.n	8002682 <HAL_UART_IRQHandler+0x62>
 8002680:	e2a0      	b.n	8002bc4 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	0010      	movs	r0, r2
 800268a:	4798      	blx	r3
      }
      return;
 800268c:	e29a      	b.n	8002bc4 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800268e:	2398      	movs	r3, #152	; 0x98
 8002690:	18fb      	adds	r3, r7, r3
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d100      	bne.n	800269a <HAL_UART_IRQHandler+0x7a>
 8002698:	e114      	b.n	80028c4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800269a:	239c      	movs	r3, #156	; 0x9c
 800269c:	18fb      	adds	r3, r7, r3
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2201      	movs	r2, #1
 80026a2:	4013      	ands	r3, r2
 80026a4:	d106      	bne.n	80026b4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80026a6:	23a0      	movs	r3, #160	; 0xa0
 80026a8:	18fb      	adds	r3, r7, r3
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a83      	ldr	r2, [pc, #524]	; (80028bc <HAL_UART_IRQHandler+0x29c>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	d100      	bne.n	80026b4 <HAL_UART_IRQHandler+0x94>
 80026b2:	e107      	b.n	80028c4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80026b4:	23a4      	movs	r3, #164	; 0xa4
 80026b6:	18fb      	adds	r3, r7, r3
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2201      	movs	r2, #1
 80026bc:	4013      	ands	r3, r2
 80026be:	d012      	beq.n	80026e6 <HAL_UART_IRQHandler+0xc6>
 80026c0:	23a0      	movs	r3, #160	; 0xa0
 80026c2:	18fb      	adds	r3, r7, r3
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	2380      	movs	r3, #128	; 0x80
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	4013      	ands	r3, r2
 80026cc:	d00b      	beq.n	80026e6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2201      	movs	r2, #1
 80026d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2284      	movs	r2, #132	; 0x84
 80026da:	589b      	ldr	r3, [r3, r2]
 80026dc:	2201      	movs	r2, #1
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2184      	movs	r1, #132	; 0x84
 80026e4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80026e6:	23a4      	movs	r3, #164	; 0xa4
 80026e8:	18fb      	adds	r3, r7, r3
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2202      	movs	r2, #2
 80026ee:	4013      	ands	r3, r2
 80026f0:	d011      	beq.n	8002716 <HAL_UART_IRQHandler+0xf6>
 80026f2:	239c      	movs	r3, #156	; 0x9c
 80026f4:	18fb      	adds	r3, r7, r3
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2201      	movs	r2, #1
 80026fa:	4013      	ands	r3, r2
 80026fc:	d00b      	beq.n	8002716 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2202      	movs	r2, #2
 8002704:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2284      	movs	r2, #132	; 0x84
 800270a:	589b      	ldr	r3, [r3, r2]
 800270c:	2204      	movs	r2, #4
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2184      	movs	r1, #132	; 0x84
 8002714:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002716:	23a4      	movs	r3, #164	; 0xa4
 8002718:	18fb      	adds	r3, r7, r3
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2204      	movs	r2, #4
 800271e:	4013      	ands	r3, r2
 8002720:	d011      	beq.n	8002746 <HAL_UART_IRQHandler+0x126>
 8002722:	239c      	movs	r3, #156	; 0x9c
 8002724:	18fb      	adds	r3, r7, r3
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2201      	movs	r2, #1
 800272a:	4013      	ands	r3, r2
 800272c:	d00b      	beq.n	8002746 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2204      	movs	r2, #4
 8002734:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2284      	movs	r2, #132	; 0x84
 800273a:	589b      	ldr	r3, [r3, r2]
 800273c:	2202      	movs	r2, #2
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2184      	movs	r1, #132	; 0x84
 8002744:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002746:	23a4      	movs	r3, #164	; 0xa4
 8002748:	18fb      	adds	r3, r7, r3
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2208      	movs	r2, #8
 800274e:	4013      	ands	r3, r2
 8002750:	d017      	beq.n	8002782 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002752:	23a0      	movs	r3, #160	; 0xa0
 8002754:	18fb      	adds	r3, r7, r3
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2220      	movs	r2, #32
 800275a:	4013      	ands	r3, r2
 800275c:	d105      	bne.n	800276a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800275e:	239c      	movs	r3, #156	; 0x9c
 8002760:	18fb      	adds	r3, r7, r3
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2201      	movs	r2, #1
 8002766:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002768:	d00b      	beq.n	8002782 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2208      	movs	r2, #8
 8002770:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2284      	movs	r2, #132	; 0x84
 8002776:	589b      	ldr	r3, [r3, r2]
 8002778:	2208      	movs	r2, #8
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2184      	movs	r1, #132	; 0x84
 8002780:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002782:	23a4      	movs	r3, #164	; 0xa4
 8002784:	18fb      	adds	r3, r7, r3
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	2380      	movs	r3, #128	; 0x80
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	4013      	ands	r3, r2
 800278e:	d013      	beq.n	80027b8 <HAL_UART_IRQHandler+0x198>
 8002790:	23a0      	movs	r3, #160	; 0xa0
 8002792:	18fb      	adds	r3, r7, r3
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	04db      	lsls	r3, r3, #19
 800279a:	4013      	ands	r3, r2
 800279c:	d00c      	beq.n	80027b8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2280      	movs	r2, #128	; 0x80
 80027a4:	0112      	lsls	r2, r2, #4
 80027a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2284      	movs	r2, #132	; 0x84
 80027ac:	589b      	ldr	r3, [r3, r2]
 80027ae:	2220      	movs	r2, #32
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2184      	movs	r1, #132	; 0x84
 80027b6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2284      	movs	r2, #132	; 0x84
 80027bc:	589b      	ldr	r3, [r3, r2]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d100      	bne.n	80027c4 <HAL_UART_IRQHandler+0x1a4>
 80027c2:	e201      	b.n	8002bc8 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80027c4:	23a4      	movs	r3, #164	; 0xa4
 80027c6:	18fb      	adds	r3, r7, r3
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2220      	movs	r2, #32
 80027cc:	4013      	ands	r3, r2
 80027ce:	d00e      	beq.n	80027ee <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80027d0:	23a0      	movs	r3, #160	; 0xa0
 80027d2:	18fb      	adds	r3, r7, r3
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2220      	movs	r2, #32
 80027d8:	4013      	ands	r3, r2
 80027da:	d008      	beq.n	80027ee <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d004      	beq.n	80027ee <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	0010      	movs	r0, r2
 80027ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2284      	movs	r2, #132	; 0x84
 80027f2:	589b      	ldr	r3, [r3, r2]
 80027f4:	2194      	movs	r1, #148	; 0x94
 80027f6:	187a      	adds	r2, r7, r1
 80027f8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2240      	movs	r2, #64	; 0x40
 8002802:	4013      	ands	r3, r2
 8002804:	2b40      	cmp	r3, #64	; 0x40
 8002806:	d004      	beq.n	8002812 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002808:	187b      	adds	r3, r7, r1
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2228      	movs	r2, #40	; 0x28
 800280e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002810:	d047      	beq.n	80028a2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	0018      	movs	r0, r3
 8002816:	f000 fe11 	bl	800343c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	2240      	movs	r2, #64	; 0x40
 8002822:	4013      	ands	r3, r2
 8002824:	2b40      	cmp	r3, #64	; 0x40
 8002826:	d137      	bne.n	8002898 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002828:	f3ef 8310 	mrs	r3, PRIMASK
 800282c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800282e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002830:	2090      	movs	r0, #144	; 0x90
 8002832:	183a      	adds	r2, r7, r0
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	2301      	movs	r3, #1
 8002838:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800283a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800283c:	f383 8810 	msr	PRIMASK, r3
}
 8002840:	46c0      	nop			; (mov r8, r8)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2140      	movs	r1, #64	; 0x40
 800284e:	438a      	bics	r2, r1
 8002850:	609a      	str	r2, [r3, #8]
 8002852:	183b      	adds	r3, r7, r0
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002858:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800285a:	f383 8810 	msr	PRIMASK, r3
}
 800285e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002864:	2b00      	cmp	r3, #0
 8002866:	d012      	beq.n	800288e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800286c:	4a14      	ldr	r2, [pc, #80]	; (80028c0 <HAL_UART_IRQHandler+0x2a0>)
 800286e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002874:	0018      	movs	r0, r3
 8002876:	f7fe fa51 	bl	8000d1c <HAL_DMA_Abort_IT>
 800287a:	1e03      	subs	r3, r0, #0
 800287c:	d01a      	beq.n	80028b4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002882:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002888:	0018      	movs	r0, r3
 800288a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800288c:	e012      	b.n	80028b4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	0018      	movs	r0, r3
 8002892:	f000 f9af 	bl	8002bf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002896:	e00d      	b.n	80028b4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	0018      	movs	r0, r3
 800289c:	f000 f9aa 	bl	8002bf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028a0:	e008      	b.n	80028b4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	0018      	movs	r0, r3
 80028a6:	f000 f9a5 	bl	8002bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2284      	movs	r2, #132	; 0x84
 80028ae:	2100      	movs	r1, #0
 80028b0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80028b2:	e189      	b.n	8002bc8 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028b4:	46c0      	nop			; (mov r8, r8)
    return;
 80028b6:	e187      	b.n	8002bc8 <HAL_UART_IRQHandler+0x5a8>
 80028b8:	0000080f 	.word	0x0000080f
 80028bc:	04000120 	.word	0x04000120
 80028c0:	08003505 	.word	0x08003505

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d000      	beq.n	80028ce <HAL_UART_IRQHandler+0x2ae>
 80028cc:	e13b      	b.n	8002b46 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80028ce:	23a4      	movs	r3, #164	; 0xa4
 80028d0:	18fb      	adds	r3, r7, r3
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2210      	movs	r2, #16
 80028d6:	4013      	ands	r3, r2
 80028d8:	d100      	bne.n	80028dc <HAL_UART_IRQHandler+0x2bc>
 80028da:	e134      	b.n	8002b46 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80028dc:	23a0      	movs	r3, #160	; 0xa0
 80028de:	18fb      	adds	r3, r7, r3
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2210      	movs	r2, #16
 80028e4:	4013      	ands	r3, r2
 80028e6:	d100      	bne.n	80028ea <HAL_UART_IRQHandler+0x2ca>
 80028e8:	e12d      	b.n	8002b46 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2210      	movs	r2, #16
 80028f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	2240      	movs	r2, #64	; 0x40
 80028fa:	4013      	ands	r3, r2
 80028fc:	2b40      	cmp	r3, #64	; 0x40
 80028fe:	d000      	beq.n	8002902 <HAL_UART_IRQHandler+0x2e2>
 8002900:	e0a1      	b.n	8002a46 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	217e      	movs	r1, #126	; 0x7e
 800290c:	187b      	adds	r3, r7, r1
 800290e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002910:	187b      	adds	r3, r7, r1
 8002912:	881b      	ldrh	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d100      	bne.n	800291a <HAL_UART_IRQHandler+0x2fa>
 8002918:	e158      	b.n	8002bcc <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2258      	movs	r2, #88	; 0x58
 800291e:	5a9b      	ldrh	r3, [r3, r2]
 8002920:	187a      	adds	r2, r7, r1
 8002922:	8812      	ldrh	r2, [r2, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d300      	bcc.n	800292a <HAL_UART_IRQHandler+0x30a>
 8002928:	e150      	b.n	8002bcc <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	187a      	adds	r2, r7, r1
 800292e:	215a      	movs	r1, #90	; 0x5a
 8002930:	8812      	ldrh	r2, [r2, #0]
 8002932:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2220      	movs	r2, #32
 800293e:	4013      	ands	r3, r2
 8002940:	d16f      	bne.n	8002a22 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002942:	f3ef 8310 	mrs	r3, PRIMASK
 8002946:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800294a:	67bb      	str	r3, [r7, #120]	; 0x78
 800294c:	2301      	movs	r3, #1
 800294e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002952:	f383 8810 	msr	PRIMASK, r3
}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	499e      	ldr	r1, [pc, #632]	; (8002bdc <HAL_UART_IRQHandler+0x5bc>)
 8002964:	400a      	ands	r2, r1
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800296a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800296c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800296e:	f383 8810 	msr	PRIMASK, r3
}
 8002972:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002974:	f3ef 8310 	mrs	r3, PRIMASK
 8002978:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800297a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800297c:	677b      	str	r3, [r7, #116]	; 0x74
 800297e:	2301      	movs	r3, #1
 8002980:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002984:	f383 8810 	msr	PRIMASK, r3
}
 8002988:	46c0      	nop			; (mov r8, r8)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2101      	movs	r1, #1
 8002996:	438a      	bics	r2, r1
 8002998:	609a      	str	r2, [r3, #8]
 800299a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800299c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800299e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029a0:	f383 8810 	msr	PRIMASK, r3
}
 80029a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029a6:	f3ef 8310 	mrs	r3, PRIMASK
 80029aa:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80029ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029ae:	673b      	str	r3, [r7, #112]	; 0x70
 80029b0:	2301      	movs	r3, #1
 80029b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029b6:	f383 8810 	msr	PRIMASK, r3
}
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2140      	movs	r1, #64	; 0x40
 80029c8:	438a      	bics	r2, r1
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029ce:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029d2:	f383 8810 	msr	PRIMASK, r3
}
 80029d6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2280      	movs	r2, #128	; 0x80
 80029dc:	2120      	movs	r1, #32
 80029de:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029e6:	f3ef 8310 	mrs	r3, PRIMASK
 80029ea:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80029ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029f0:	2301      	movs	r3, #1
 80029f2:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029f6:	f383 8810 	msr	PRIMASK, r3
}
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2110      	movs	r1, #16
 8002a08:	438a      	bics	r2, r1
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a0e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a12:	f383 8810 	msr	PRIMASK, r3
}
 8002a16:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f7fe f93d 	bl	8000c9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2202      	movs	r2, #2
 8002a26:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2258      	movs	r2, #88	; 0x58
 8002a2c:	5a9a      	ldrh	r2, [r3, r2]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	215a      	movs	r1, #90	; 0x5a
 8002a32:	5a5b      	ldrh	r3, [r3, r1]
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	0011      	movs	r1, r2
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f000 f8e0 	bl	8002c04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002a44:	e0c2      	b.n	8002bcc <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2258      	movs	r2, #88	; 0x58
 8002a4a:	5a99      	ldrh	r1, [r3, r2]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	225a      	movs	r2, #90	; 0x5a
 8002a50:	5a9b      	ldrh	r3, [r3, r2]
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	208e      	movs	r0, #142	; 0x8e
 8002a56:	183b      	adds	r3, r7, r0
 8002a58:	1a8a      	subs	r2, r1, r2
 8002a5a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	225a      	movs	r2, #90	; 0x5a
 8002a60:	5a9b      	ldrh	r3, [r3, r2]
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d100      	bne.n	8002a6a <HAL_UART_IRQHandler+0x44a>
 8002a68:	e0b2      	b.n	8002bd0 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8002a6a:	183b      	adds	r3, r7, r0
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d100      	bne.n	8002a74 <HAL_UART_IRQHandler+0x454>
 8002a72:	e0ad      	b.n	8002bd0 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a74:	f3ef 8310 	mrs	r3, PRIMASK
 8002a78:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a7c:	2488      	movs	r4, #136	; 0x88
 8002a7e:	193a      	adds	r2, r7, r4
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	2301      	movs	r3, #1
 8002a84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f383 8810 	msr	PRIMASK, r3
}
 8002a8c:	46c0      	nop			; (mov r8, r8)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4951      	ldr	r1, [pc, #324]	; (8002be0 <HAL_UART_IRQHandler+0x5c0>)
 8002a9a:	400a      	ands	r2, r1
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	193b      	adds	r3, r7, r4
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f383 8810 	msr	PRIMASK, r3
}
 8002aaa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aac:	f3ef 8310 	mrs	r3, PRIMASK
 8002ab0:	61bb      	str	r3, [r7, #24]
  return(result);
 8002ab2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ab4:	2484      	movs	r4, #132	; 0x84
 8002ab6:	193a      	adds	r2, r7, r4
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	2301      	movs	r3, #1
 8002abc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	f383 8810 	msr	PRIMASK, r3
}
 8002ac4:	46c0      	nop			; (mov r8, r8)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	438a      	bics	r2, r1
 8002ad4:	609a      	str	r2, [r3, #8]
 8002ad6:	193b      	adds	r3, r7, r4
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002adc:	6a3b      	ldr	r3, [r7, #32]
 8002ade:	f383 8810 	msr	PRIMASK, r3
}
 8002ae2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2280      	movs	r2, #128	; 0x80
 8002ae8:	2120      	movs	r1, #32
 8002aea:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002af8:	f3ef 8310 	mrs	r3, PRIMASK
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b00:	2480      	movs	r4, #128	; 0x80
 8002b02:	193a      	adds	r2, r7, r4
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	2301      	movs	r3, #1
 8002b08:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0c:	f383 8810 	msr	PRIMASK, r3
}
 8002b10:	46c0      	nop			; (mov r8, r8)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2110      	movs	r1, #16
 8002b1e:	438a      	bics	r2, r1
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	193b      	adds	r3, r7, r4
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2a:	f383 8810 	msr	PRIMASK, r3
}
 8002b2e:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b36:	183b      	adds	r3, r7, r0
 8002b38:	881a      	ldrh	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	0011      	movs	r1, r2
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f000 f860 	bl	8002c04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b44:	e044      	b.n	8002bd0 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002b46:	23a4      	movs	r3, #164	; 0xa4
 8002b48:	18fb      	adds	r3, r7, r3
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	2380      	movs	r3, #128	; 0x80
 8002b4e:	035b      	lsls	r3, r3, #13
 8002b50:	4013      	ands	r3, r2
 8002b52:	d010      	beq.n	8002b76 <HAL_UART_IRQHandler+0x556>
 8002b54:	239c      	movs	r3, #156	; 0x9c
 8002b56:	18fb      	adds	r3, r7, r3
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	2380      	movs	r3, #128	; 0x80
 8002b5c:	03db      	lsls	r3, r3, #15
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d009      	beq.n	8002b76 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2280      	movs	r2, #128	; 0x80
 8002b68:	0352      	lsls	r2, r2, #13
 8002b6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f000 fd0a 	bl	8003588 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002b74:	e02f      	b.n	8002bd6 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002b76:	23a4      	movs	r3, #164	; 0xa4
 8002b78:	18fb      	adds	r3, r7, r3
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2280      	movs	r2, #128	; 0x80
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d00f      	beq.n	8002ba2 <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002b82:	23a0      	movs	r3, #160	; 0xa0
 8002b84:	18fb      	adds	r3, r7, r3
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2280      	movs	r2, #128	; 0x80
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d009      	beq.n	8002ba2 <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d01e      	beq.n	8002bd4 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	0010      	movs	r0, r2
 8002b9e:	4798      	blx	r3
    }
    return;
 8002ba0:	e018      	b.n	8002bd4 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ba2:	23a4      	movs	r3, #164	; 0xa4
 8002ba4:	18fb      	adds	r3, r7, r3
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2240      	movs	r2, #64	; 0x40
 8002baa:	4013      	ands	r3, r2
 8002bac:	d013      	beq.n	8002bd6 <HAL_UART_IRQHandler+0x5b6>
 8002bae:	23a0      	movs	r3, #160	; 0xa0
 8002bb0:	18fb      	adds	r3, r7, r3
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2240      	movs	r2, #64	; 0x40
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d00d      	beq.n	8002bd6 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f000 fcb8 	bl	8003532 <UART_EndTransmit_IT>
    return;
 8002bc2:	e008      	b.n	8002bd6 <HAL_UART_IRQHandler+0x5b6>
      return;
 8002bc4:	46c0      	nop			; (mov r8, r8)
 8002bc6:	e006      	b.n	8002bd6 <HAL_UART_IRQHandler+0x5b6>
    return;
 8002bc8:	46c0      	nop			; (mov r8, r8)
 8002bca:	e004      	b.n	8002bd6 <HAL_UART_IRQHandler+0x5b6>
      return;
 8002bcc:	46c0      	nop			; (mov r8, r8)
 8002bce:	e002      	b.n	8002bd6 <HAL_UART_IRQHandler+0x5b6>
      return;
 8002bd0:	46c0      	nop			; (mov r8, r8)
 8002bd2:	e000      	b.n	8002bd6 <HAL_UART_IRQHandler+0x5b6>
    return;
 8002bd4:	46c0      	nop			; (mov r8, r8)
  }

}
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	b02b      	add	sp, #172	; 0xac
 8002bda:	bd90      	pop	{r4, r7, pc}
 8002bdc:	fffffeff 	.word	0xfffffeff
 8002be0:	fffffedf 	.word	0xfffffedf

08002be4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002bec:	46c0      	nop			; (mov r8, r8)
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	b002      	add	sp, #8
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002bfc:	46c0      	nop			; (mov r8, r8)
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	b002      	add	sp, #8
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	000a      	movs	r2, r1
 8002c0e:	1cbb      	adds	r3, r7, #2
 8002c10:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	46bd      	mov	sp, r7
 8002c16:	b002      	add	sp, #8
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c1c:	b5b0      	push	{r4, r5, r7, lr}
 8002c1e:	b08e      	sub	sp, #56	; 0x38
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c24:	231a      	movs	r3, #26
 8002c26:	2218      	movs	r2, #24
 8002c28:	189b      	adds	r3, r3, r2
 8002c2a:	19db      	adds	r3, r3, r7
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	69db      	ldr	r3, [r3, #28]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4ab4      	ldr	r2, [pc, #720]	; (8002f20 <UART_SetConfig+0x304>)
 8002c50:	4013      	ands	r3, r2
 8002c52:	0019      	movs	r1, r3
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	4aaf      	ldr	r2, [pc, #700]	; (8002f24 <UART_SetConfig+0x308>)
 8002c66:	4013      	ands	r3, r2
 8002c68:	0019      	movs	r1, r3
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4aa9      	ldr	r2, [pc, #676]	; (8002f28 <UART_SetConfig+0x30c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d004      	beq.n	8002c90 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	4aa5      	ldr	r2, [pc, #660]	; (8002f2c <UART_SetConfig+0x310>)
 8002c98:	4013      	ands	r3, r2
 8002c9a:	0019      	movs	r1, r3
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4aa1      	ldr	r2, [pc, #644]	; (8002f30 <UART_SetConfig+0x314>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d131      	bne.n	8002d14 <UART_SetConfig+0xf8>
 8002cb0:	4ba0      	ldr	r3, [pc, #640]	; (8002f34 <UART_SetConfig+0x318>)
 8002cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb4:	220c      	movs	r2, #12
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	2b0c      	cmp	r3, #12
 8002cba:	d01d      	beq.n	8002cf8 <UART_SetConfig+0xdc>
 8002cbc:	d823      	bhi.n	8002d06 <UART_SetConfig+0xea>
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d00c      	beq.n	8002cdc <UART_SetConfig+0xc0>
 8002cc2:	d820      	bhi.n	8002d06 <UART_SetConfig+0xea>
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d002      	beq.n	8002cce <UART_SetConfig+0xb2>
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d00e      	beq.n	8002cea <UART_SetConfig+0xce>
 8002ccc:	e01b      	b.n	8002d06 <UART_SetConfig+0xea>
 8002cce:	231b      	movs	r3, #27
 8002cd0:	2218      	movs	r2, #24
 8002cd2:	189b      	adds	r3, r3, r2
 8002cd4:	19db      	adds	r3, r3, r7
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	701a      	strb	r2, [r3, #0]
 8002cda:	e065      	b.n	8002da8 <UART_SetConfig+0x18c>
 8002cdc:	231b      	movs	r3, #27
 8002cde:	2218      	movs	r2, #24
 8002ce0:	189b      	adds	r3, r3, r2
 8002ce2:	19db      	adds	r3, r3, r7
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	701a      	strb	r2, [r3, #0]
 8002ce8:	e05e      	b.n	8002da8 <UART_SetConfig+0x18c>
 8002cea:	231b      	movs	r3, #27
 8002cec:	2218      	movs	r2, #24
 8002cee:	189b      	adds	r3, r3, r2
 8002cf0:	19db      	adds	r3, r3, r7
 8002cf2:	2204      	movs	r2, #4
 8002cf4:	701a      	strb	r2, [r3, #0]
 8002cf6:	e057      	b.n	8002da8 <UART_SetConfig+0x18c>
 8002cf8:	231b      	movs	r3, #27
 8002cfa:	2218      	movs	r2, #24
 8002cfc:	189b      	adds	r3, r3, r2
 8002cfe:	19db      	adds	r3, r3, r7
 8002d00:	2208      	movs	r2, #8
 8002d02:	701a      	strb	r2, [r3, #0]
 8002d04:	e050      	b.n	8002da8 <UART_SetConfig+0x18c>
 8002d06:	231b      	movs	r3, #27
 8002d08:	2218      	movs	r2, #24
 8002d0a:	189b      	adds	r3, r3, r2
 8002d0c:	19db      	adds	r3, r3, r7
 8002d0e:	2210      	movs	r2, #16
 8002d10:	701a      	strb	r2, [r3, #0]
 8002d12:	e049      	b.n	8002da8 <UART_SetConfig+0x18c>
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a83      	ldr	r2, [pc, #524]	; (8002f28 <UART_SetConfig+0x30c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d13e      	bne.n	8002d9c <UART_SetConfig+0x180>
 8002d1e:	4b85      	ldr	r3, [pc, #532]	; (8002f34 <UART_SetConfig+0x318>)
 8002d20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d22:	23c0      	movs	r3, #192	; 0xc0
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	4013      	ands	r3, r2
 8002d28:	22c0      	movs	r2, #192	; 0xc0
 8002d2a:	0112      	lsls	r2, r2, #4
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d027      	beq.n	8002d80 <UART_SetConfig+0x164>
 8002d30:	22c0      	movs	r2, #192	; 0xc0
 8002d32:	0112      	lsls	r2, r2, #4
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d82a      	bhi.n	8002d8e <UART_SetConfig+0x172>
 8002d38:	2280      	movs	r2, #128	; 0x80
 8002d3a:	0112      	lsls	r2, r2, #4
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d011      	beq.n	8002d64 <UART_SetConfig+0x148>
 8002d40:	2280      	movs	r2, #128	; 0x80
 8002d42:	0112      	lsls	r2, r2, #4
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d822      	bhi.n	8002d8e <UART_SetConfig+0x172>
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d004      	beq.n	8002d56 <UART_SetConfig+0x13a>
 8002d4c:	2280      	movs	r2, #128	; 0x80
 8002d4e:	00d2      	lsls	r2, r2, #3
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d00e      	beq.n	8002d72 <UART_SetConfig+0x156>
 8002d54:	e01b      	b.n	8002d8e <UART_SetConfig+0x172>
 8002d56:	231b      	movs	r3, #27
 8002d58:	2218      	movs	r2, #24
 8002d5a:	189b      	adds	r3, r3, r2
 8002d5c:	19db      	adds	r3, r3, r7
 8002d5e:	2200      	movs	r2, #0
 8002d60:	701a      	strb	r2, [r3, #0]
 8002d62:	e021      	b.n	8002da8 <UART_SetConfig+0x18c>
 8002d64:	231b      	movs	r3, #27
 8002d66:	2218      	movs	r2, #24
 8002d68:	189b      	adds	r3, r3, r2
 8002d6a:	19db      	adds	r3, r3, r7
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	701a      	strb	r2, [r3, #0]
 8002d70:	e01a      	b.n	8002da8 <UART_SetConfig+0x18c>
 8002d72:	231b      	movs	r3, #27
 8002d74:	2218      	movs	r2, #24
 8002d76:	189b      	adds	r3, r3, r2
 8002d78:	19db      	adds	r3, r3, r7
 8002d7a:	2204      	movs	r2, #4
 8002d7c:	701a      	strb	r2, [r3, #0]
 8002d7e:	e013      	b.n	8002da8 <UART_SetConfig+0x18c>
 8002d80:	231b      	movs	r3, #27
 8002d82:	2218      	movs	r2, #24
 8002d84:	189b      	adds	r3, r3, r2
 8002d86:	19db      	adds	r3, r3, r7
 8002d88:	2208      	movs	r2, #8
 8002d8a:	701a      	strb	r2, [r3, #0]
 8002d8c:	e00c      	b.n	8002da8 <UART_SetConfig+0x18c>
 8002d8e:	231b      	movs	r3, #27
 8002d90:	2218      	movs	r2, #24
 8002d92:	189b      	adds	r3, r3, r2
 8002d94:	19db      	adds	r3, r3, r7
 8002d96:	2210      	movs	r2, #16
 8002d98:	701a      	strb	r2, [r3, #0]
 8002d9a:	e005      	b.n	8002da8 <UART_SetConfig+0x18c>
 8002d9c:	231b      	movs	r3, #27
 8002d9e:	2218      	movs	r2, #24
 8002da0:	189b      	adds	r3, r3, r2
 8002da2:	19db      	adds	r3, r3, r7
 8002da4:	2210      	movs	r2, #16
 8002da6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a5e      	ldr	r2, [pc, #376]	; (8002f28 <UART_SetConfig+0x30c>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d000      	beq.n	8002db4 <UART_SetConfig+0x198>
 8002db2:	e084      	b.n	8002ebe <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002db4:	231b      	movs	r3, #27
 8002db6:	2218      	movs	r2, #24
 8002db8:	189b      	adds	r3, r3, r2
 8002dba:	19db      	adds	r3, r3, r7
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d01d      	beq.n	8002dfe <UART_SetConfig+0x1e2>
 8002dc2:	dc20      	bgt.n	8002e06 <UART_SetConfig+0x1ea>
 8002dc4:	2b04      	cmp	r3, #4
 8002dc6:	d015      	beq.n	8002df4 <UART_SetConfig+0x1d8>
 8002dc8:	dc1d      	bgt.n	8002e06 <UART_SetConfig+0x1ea>
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d002      	beq.n	8002dd4 <UART_SetConfig+0x1b8>
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d005      	beq.n	8002dde <UART_SetConfig+0x1c2>
 8002dd2:	e018      	b.n	8002e06 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dd4:	f7fe ff32 	bl	8001c3c <HAL_RCC_GetPCLK1Freq>
 8002dd8:	0003      	movs	r3, r0
 8002dda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ddc:	e01c      	b.n	8002e18 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002dde:	4b55      	ldr	r3, [pc, #340]	; (8002f34 <UART_SetConfig+0x318>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2210      	movs	r2, #16
 8002de4:	4013      	ands	r3, r2
 8002de6:	d002      	beq.n	8002dee <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002de8:	4b53      	ldr	r3, [pc, #332]	; (8002f38 <UART_SetConfig+0x31c>)
 8002dea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002dec:	e014      	b.n	8002e18 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8002dee:	4b53      	ldr	r3, [pc, #332]	; (8002f3c <UART_SetConfig+0x320>)
 8002df0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002df2:	e011      	b.n	8002e18 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002df4:	f7fe fe72 	bl	8001adc <HAL_RCC_GetSysClockFreq>
 8002df8:	0003      	movs	r3, r0
 8002dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002dfc:	e00c      	b.n	8002e18 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dfe:	2380      	movs	r3, #128	; 0x80
 8002e00:	021b      	lsls	r3, r3, #8
 8002e02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e04:	e008      	b.n	8002e18 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002e0a:	231a      	movs	r3, #26
 8002e0c:	2218      	movs	r2, #24
 8002e0e:	189b      	adds	r3, r3, r2
 8002e10:	19db      	adds	r3, r3, r7
 8002e12:	2201      	movs	r2, #1
 8002e14:	701a      	strb	r2, [r3, #0]
        break;
 8002e16:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d100      	bne.n	8002e20 <UART_SetConfig+0x204>
 8002e1e:	e12f      	b.n	8003080 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	0013      	movs	r3, r2
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	189b      	adds	r3, r3, r2
 8002e2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d305      	bcc.n	8002e3c <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d906      	bls.n	8002e4a <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8002e3c:	231a      	movs	r3, #26
 8002e3e:	2218      	movs	r2, #24
 8002e40:	189b      	adds	r3, r3, r2
 8002e42:	19db      	adds	r3, r3, r7
 8002e44:	2201      	movs	r2, #1
 8002e46:	701a      	strb	r2, [r3, #0]
 8002e48:	e11a      	b.n	8003080 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4c:	613b      	str	r3, [r7, #16]
 8002e4e:	2300      	movs	r3, #0
 8002e50:	617b      	str	r3, [r7, #20]
 8002e52:	6939      	ldr	r1, [r7, #16]
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	000b      	movs	r3, r1
 8002e58:	0e1b      	lsrs	r3, r3, #24
 8002e5a:	0010      	movs	r0, r2
 8002e5c:	0205      	lsls	r5, r0, #8
 8002e5e:	431d      	orrs	r5, r3
 8002e60:	000b      	movs	r3, r1
 8002e62:	021c      	lsls	r4, r3, #8
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	085b      	lsrs	r3, r3, #1
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	68b8      	ldr	r0, [r7, #8]
 8002e72:	68f9      	ldr	r1, [r7, #12]
 8002e74:	1900      	adds	r0, r0, r4
 8002e76:	4169      	adcs	r1, r5
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	603b      	str	r3, [r7, #0]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	607b      	str	r3, [r7, #4]
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f7fd f9cb 	bl	8000220 <__aeabi_uldivmod>
 8002e8a:	0002      	movs	r2, r0
 8002e8c:	000b      	movs	r3, r1
 8002e8e:	0013      	movs	r3, r2
 8002e90:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e94:	23c0      	movs	r3, #192	; 0xc0
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d309      	bcc.n	8002eb0 <UART_SetConfig+0x294>
 8002e9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e9e:	2380      	movs	r3, #128	; 0x80
 8002ea0:	035b      	lsls	r3, r3, #13
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d204      	bcs.n	8002eb0 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eac:	60da      	str	r2, [r3, #12]
 8002eae:	e0e7      	b.n	8003080 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8002eb0:	231a      	movs	r3, #26
 8002eb2:	2218      	movs	r2, #24
 8002eb4:	189b      	adds	r3, r3, r2
 8002eb6:	19db      	adds	r3, r3, r7
 8002eb8:	2201      	movs	r2, #1
 8002eba:	701a      	strb	r2, [r3, #0]
 8002ebc:	e0e0      	b.n	8003080 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	69da      	ldr	r2, [r3, #28]
 8002ec2:	2380      	movs	r3, #128	; 0x80
 8002ec4:	021b      	lsls	r3, r3, #8
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d000      	beq.n	8002ecc <UART_SetConfig+0x2b0>
 8002eca:	e082      	b.n	8002fd2 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8002ecc:	231b      	movs	r3, #27
 8002ece:	2218      	movs	r2, #24
 8002ed0:	189b      	adds	r3, r3, r2
 8002ed2:	19db      	adds	r3, r3, r7
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d834      	bhi.n	8002f44 <UART_SetConfig+0x328>
 8002eda:	009a      	lsls	r2, r3, #2
 8002edc:	4b18      	ldr	r3, [pc, #96]	; (8002f40 <UART_SetConfig+0x324>)
 8002ede:	18d3      	adds	r3, r2, r3
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ee4:	f7fe feaa 	bl	8001c3c <HAL_RCC_GetPCLK1Freq>
 8002ee8:	0003      	movs	r3, r0
 8002eea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002eec:	e033      	b.n	8002f56 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002eee:	f7fe febb 	bl	8001c68 <HAL_RCC_GetPCLK2Freq>
 8002ef2:	0003      	movs	r3, r0
 8002ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ef6:	e02e      	b.n	8002f56 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ef8:	4b0e      	ldr	r3, [pc, #56]	; (8002f34 <UART_SetConfig+0x318>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2210      	movs	r2, #16
 8002efe:	4013      	ands	r3, r2
 8002f00:	d002      	beq.n	8002f08 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002f02:	4b0d      	ldr	r3, [pc, #52]	; (8002f38 <UART_SetConfig+0x31c>)
 8002f04:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002f06:	e026      	b.n	8002f56 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8002f08:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <UART_SetConfig+0x320>)
 8002f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f0c:	e023      	b.n	8002f56 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f0e:	f7fe fde5 	bl	8001adc <HAL_RCC_GetSysClockFreq>
 8002f12:	0003      	movs	r3, r0
 8002f14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f16:	e01e      	b.n	8002f56 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f18:	2380      	movs	r3, #128	; 0x80
 8002f1a:	021b      	lsls	r3, r3, #8
 8002f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f1e:	e01a      	b.n	8002f56 <UART_SetConfig+0x33a>
 8002f20:	efff69f3 	.word	0xefff69f3
 8002f24:	ffffcfff 	.word	0xffffcfff
 8002f28:	40004800 	.word	0x40004800
 8002f2c:	fffff4ff 	.word	0xfffff4ff
 8002f30:	40004400 	.word	0x40004400
 8002f34:	40021000 	.word	0x40021000
 8002f38:	003d0900 	.word	0x003d0900
 8002f3c:	00f42400 	.word	0x00f42400
 8002f40:	08003634 	.word	0x08003634
      default:
        pclk = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002f48:	231a      	movs	r3, #26
 8002f4a:	2218      	movs	r2, #24
 8002f4c:	189b      	adds	r3, r3, r2
 8002f4e:	19db      	adds	r3, r3, r7
 8002f50:	2201      	movs	r2, #1
 8002f52:	701a      	strb	r2, [r3, #0]
        break;
 8002f54:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d100      	bne.n	8002f5e <UART_SetConfig+0x342>
 8002f5c:	e090      	b.n	8003080 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f60:	005a      	lsls	r2, r3, #1
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	085b      	lsrs	r3, r3, #1
 8002f68:	18d2      	adds	r2, r2, r3
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	0019      	movs	r1, r3
 8002f70:	0010      	movs	r0, r2
 8002f72:	f7fd f8c9 	bl	8000108 <__udivsi3>
 8002f76:	0003      	movs	r3, r0
 8002f78:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7c:	2b0f      	cmp	r3, #15
 8002f7e:	d921      	bls.n	8002fc4 <UART_SetConfig+0x3a8>
 8002f80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f82:	2380      	movs	r3, #128	; 0x80
 8002f84:	025b      	lsls	r3, r3, #9
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d21c      	bcs.n	8002fc4 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	200e      	movs	r0, #14
 8002f90:	2418      	movs	r4, #24
 8002f92:	1903      	adds	r3, r0, r4
 8002f94:	19db      	adds	r3, r3, r7
 8002f96:	210f      	movs	r1, #15
 8002f98:	438a      	bics	r2, r1
 8002f9a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9e:	085b      	lsrs	r3, r3, #1
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2207      	movs	r2, #7
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	b299      	uxth	r1, r3
 8002fa8:	1903      	adds	r3, r0, r4
 8002faa:	19db      	adds	r3, r3, r7
 8002fac:	1902      	adds	r2, r0, r4
 8002fae:	19d2      	adds	r2, r2, r7
 8002fb0:	8812      	ldrh	r2, [r2, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	1902      	adds	r2, r0, r4
 8002fbc:	19d2      	adds	r2, r2, r7
 8002fbe:	8812      	ldrh	r2, [r2, #0]
 8002fc0:	60da      	str	r2, [r3, #12]
 8002fc2:	e05d      	b.n	8003080 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8002fc4:	231a      	movs	r3, #26
 8002fc6:	2218      	movs	r2, #24
 8002fc8:	189b      	adds	r3, r3, r2
 8002fca:	19db      	adds	r3, r3, r7
 8002fcc:	2201      	movs	r2, #1
 8002fce:	701a      	strb	r2, [r3, #0]
 8002fd0:	e056      	b.n	8003080 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fd2:	231b      	movs	r3, #27
 8002fd4:	2218      	movs	r2, #24
 8002fd6:	189b      	adds	r3, r3, r2
 8002fd8:	19db      	adds	r3, r3, r7
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d822      	bhi.n	8003026 <UART_SetConfig+0x40a>
 8002fe0:	009a      	lsls	r2, r3, #2
 8002fe2:	4b2f      	ldr	r3, [pc, #188]	; (80030a0 <UART_SetConfig+0x484>)
 8002fe4:	18d3      	adds	r3, r2, r3
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fea:	f7fe fe27 	bl	8001c3c <HAL_RCC_GetPCLK1Freq>
 8002fee:	0003      	movs	r3, r0
 8002ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ff2:	e021      	b.n	8003038 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ff4:	f7fe fe38 	bl	8001c68 <HAL_RCC_GetPCLK2Freq>
 8002ff8:	0003      	movs	r3, r0
 8002ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ffc:	e01c      	b.n	8003038 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ffe:	4b29      	ldr	r3, [pc, #164]	; (80030a4 <UART_SetConfig+0x488>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2210      	movs	r2, #16
 8003004:	4013      	ands	r3, r2
 8003006:	d002      	beq.n	800300e <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003008:	4b27      	ldr	r3, [pc, #156]	; (80030a8 <UART_SetConfig+0x48c>)
 800300a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800300c:	e014      	b.n	8003038 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 800300e:	4b27      	ldr	r3, [pc, #156]	; (80030ac <UART_SetConfig+0x490>)
 8003010:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003012:	e011      	b.n	8003038 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003014:	f7fe fd62 	bl	8001adc <HAL_RCC_GetSysClockFreq>
 8003018:	0003      	movs	r3, r0
 800301a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800301c:	e00c      	b.n	8003038 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800301e:	2380      	movs	r3, #128	; 0x80
 8003020:	021b      	lsls	r3, r3, #8
 8003022:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003024:	e008      	b.n	8003038 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8003026:	2300      	movs	r3, #0
 8003028:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800302a:	231a      	movs	r3, #26
 800302c:	2218      	movs	r2, #24
 800302e:	189b      	adds	r3, r3, r2
 8003030:	19db      	adds	r3, r3, r7
 8003032:	2201      	movs	r2, #1
 8003034:	701a      	strb	r2, [r3, #0]
        break;
 8003036:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303a:	2b00      	cmp	r3, #0
 800303c:	d020      	beq.n	8003080 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	085a      	lsrs	r2, r3, #1
 8003044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003046:	18d2      	adds	r2, r2, r3
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	0019      	movs	r1, r3
 800304e:	0010      	movs	r0, r2
 8003050:	f7fd f85a 	bl	8000108 <__udivsi3>
 8003054:	0003      	movs	r3, r0
 8003056:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305a:	2b0f      	cmp	r3, #15
 800305c:	d90a      	bls.n	8003074 <UART_SetConfig+0x458>
 800305e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003060:	2380      	movs	r3, #128	; 0x80
 8003062:	025b      	lsls	r3, r3, #9
 8003064:	429a      	cmp	r2, r3
 8003066:	d205      	bcs.n	8003074 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306a:	b29a      	uxth	r2, r3
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	60da      	str	r2, [r3, #12]
 8003072:	e005      	b.n	8003080 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003074:	231a      	movs	r3, #26
 8003076:	2218      	movs	r2, #24
 8003078:	189b      	adds	r3, r3, r2
 800307a:	19db      	adds	r3, r3, r7
 800307c:	2201      	movs	r2, #1
 800307e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	2200      	movs	r2, #0
 8003084:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	2200      	movs	r2, #0
 800308a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800308c:	231a      	movs	r3, #26
 800308e:	2218      	movs	r2, #24
 8003090:	189b      	adds	r3, r3, r2
 8003092:	19db      	adds	r3, r3, r7
 8003094:	781b      	ldrb	r3, [r3, #0]
}
 8003096:	0018      	movs	r0, r3
 8003098:	46bd      	mov	sp, r7
 800309a:	b00e      	add	sp, #56	; 0x38
 800309c:	bdb0      	pop	{r4, r5, r7, pc}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	08003658 	.word	0x08003658
 80030a4:	40021000 	.word	0x40021000
 80030a8:	003d0900 	.word	0x003d0900
 80030ac:	00f42400 	.word	0x00f42400

080030b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	2201      	movs	r2, #1
 80030be:	4013      	ands	r3, r2
 80030c0:	d00b      	beq.n	80030da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	4a4a      	ldr	r2, [pc, #296]	; (80031f4 <UART_AdvFeatureConfig+0x144>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	0019      	movs	r1, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	2202      	movs	r2, #2
 80030e0:	4013      	ands	r3, r2
 80030e2:	d00b      	beq.n	80030fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	4a43      	ldr	r2, [pc, #268]	; (80031f8 <UART_AdvFeatureConfig+0x148>)
 80030ec:	4013      	ands	r3, r2
 80030ee:	0019      	movs	r1, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	2204      	movs	r2, #4
 8003102:	4013      	ands	r3, r2
 8003104:	d00b      	beq.n	800311e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	4a3b      	ldr	r2, [pc, #236]	; (80031fc <UART_AdvFeatureConfig+0x14c>)
 800310e:	4013      	ands	r3, r2
 8003110:	0019      	movs	r1, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	2208      	movs	r2, #8
 8003124:	4013      	ands	r3, r2
 8003126:	d00b      	beq.n	8003140 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	4a34      	ldr	r2, [pc, #208]	; (8003200 <UART_AdvFeatureConfig+0x150>)
 8003130:	4013      	ands	r3, r2
 8003132:	0019      	movs	r1, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	2210      	movs	r2, #16
 8003146:	4013      	ands	r3, r2
 8003148:	d00b      	beq.n	8003162 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	4a2c      	ldr	r2, [pc, #176]	; (8003204 <UART_AdvFeatureConfig+0x154>)
 8003152:	4013      	ands	r3, r2
 8003154:	0019      	movs	r1, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	2220      	movs	r2, #32
 8003168:	4013      	ands	r3, r2
 800316a:	d00b      	beq.n	8003184 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	4a25      	ldr	r2, [pc, #148]	; (8003208 <UART_AdvFeatureConfig+0x158>)
 8003174:	4013      	ands	r3, r2
 8003176:	0019      	movs	r1, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	2240      	movs	r2, #64	; 0x40
 800318a:	4013      	ands	r3, r2
 800318c:	d01d      	beq.n	80031ca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	4a1d      	ldr	r2, [pc, #116]	; (800320c <UART_AdvFeatureConfig+0x15c>)
 8003196:	4013      	ands	r3, r2
 8003198:	0019      	movs	r1, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031aa:	2380      	movs	r3, #128	; 0x80
 80031ac:	035b      	lsls	r3, r3, #13
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d10b      	bne.n	80031ca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	4a15      	ldr	r2, [pc, #84]	; (8003210 <UART_AdvFeatureConfig+0x160>)
 80031ba:	4013      	ands	r3, r2
 80031bc:	0019      	movs	r1, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	2280      	movs	r2, #128	; 0x80
 80031d0:	4013      	ands	r3, r2
 80031d2:	d00b      	beq.n	80031ec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	4a0e      	ldr	r2, [pc, #56]	; (8003214 <UART_AdvFeatureConfig+0x164>)
 80031dc:	4013      	ands	r3, r2
 80031de:	0019      	movs	r1, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	605a      	str	r2, [r3, #4]
  }
}
 80031ec:	46c0      	nop			; (mov r8, r8)
 80031ee:	46bd      	mov	sp, r7
 80031f0:	b002      	add	sp, #8
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	fffdffff 	.word	0xfffdffff
 80031f8:	fffeffff 	.word	0xfffeffff
 80031fc:	fffbffff 	.word	0xfffbffff
 8003200:	ffff7fff 	.word	0xffff7fff
 8003204:	ffffefff 	.word	0xffffefff
 8003208:	ffffdfff 	.word	0xffffdfff
 800320c:	ffefffff 	.word	0xffefffff
 8003210:	ff9fffff 	.word	0xff9fffff
 8003214:	fff7ffff 	.word	0xfff7ffff

08003218 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b092      	sub	sp, #72	; 0x48
 800321c:	af02      	add	r7, sp, #8
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2284      	movs	r2, #132	; 0x84
 8003224:	2100      	movs	r1, #0
 8003226:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003228:	f7fd fc2c 	bl	8000a84 <HAL_GetTick>
 800322c:	0003      	movs	r3, r0
 800322e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2208      	movs	r2, #8
 8003238:	4013      	ands	r3, r2
 800323a:	2b08      	cmp	r3, #8
 800323c:	d12c      	bne.n	8003298 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800323e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003240:	2280      	movs	r2, #128	; 0x80
 8003242:	0391      	lsls	r1, r2, #14
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	4a46      	ldr	r2, [pc, #280]	; (8003360 <UART_CheckIdleState+0x148>)
 8003248:	9200      	str	r2, [sp, #0]
 800324a:	2200      	movs	r2, #0
 800324c:	f000 f88c 	bl	8003368 <UART_WaitOnFlagUntilTimeout>
 8003250:	1e03      	subs	r3, r0, #0
 8003252:	d021      	beq.n	8003298 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003254:	f3ef 8310 	mrs	r3, PRIMASK
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800325c:	63bb      	str	r3, [r7, #56]	; 0x38
 800325e:	2301      	movs	r3, #1
 8003260:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003264:	f383 8810 	msr	PRIMASK, r3
}
 8003268:	46c0      	nop			; (mov r8, r8)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2180      	movs	r1, #128	; 0x80
 8003276:	438a      	bics	r2, r1
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800327c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800327e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003280:	f383 8810 	msr	PRIMASK, r3
}
 8003284:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2220      	movs	r2, #32
 800328a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2278      	movs	r2, #120	; 0x78
 8003290:	2100      	movs	r1, #0
 8003292:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e05f      	b.n	8003358 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2204      	movs	r2, #4
 80032a0:	4013      	ands	r3, r2
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d146      	bne.n	8003334 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032a8:	2280      	movs	r2, #128	; 0x80
 80032aa:	03d1      	lsls	r1, r2, #15
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	4a2c      	ldr	r2, [pc, #176]	; (8003360 <UART_CheckIdleState+0x148>)
 80032b0:	9200      	str	r2, [sp, #0]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f000 f858 	bl	8003368 <UART_WaitOnFlagUntilTimeout>
 80032b8:	1e03      	subs	r3, r0, #0
 80032ba:	d03b      	beq.n	8003334 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032bc:	f3ef 8310 	mrs	r3, PRIMASK
 80032c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80032c2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032c4:	637b      	str	r3, [r7, #52]	; 0x34
 80032c6:	2301      	movs	r3, #1
 80032c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f383 8810 	msr	PRIMASK, r3
}
 80032d0:	46c0      	nop			; (mov r8, r8)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4921      	ldr	r1, [pc, #132]	; (8003364 <UART_CheckIdleState+0x14c>)
 80032de:	400a      	ands	r2, r1
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f383 8810 	msr	PRIMASK, r3
}
 80032ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032ee:	f3ef 8310 	mrs	r3, PRIMASK
 80032f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80032f4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032f6:	633b      	str	r3, [r7, #48]	; 0x30
 80032f8:	2301      	movs	r3, #1
 80032fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f383 8810 	msr	PRIMASK, r3
}
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2101      	movs	r1, #1
 8003310:	438a      	bics	r2, r1
 8003312:	609a      	str	r2, [r3, #8]
 8003314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003316:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	f383 8810 	msr	PRIMASK, r3
}
 800331e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2280      	movs	r2, #128	; 0x80
 8003324:	2120      	movs	r1, #32
 8003326:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2278      	movs	r2, #120	; 0x78
 800332c:	2100      	movs	r1, #0
 800332e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e011      	b.n	8003358 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2220      	movs	r2, #32
 8003338:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2280      	movs	r2, #128	; 0x80
 800333e:	2120      	movs	r1, #32
 8003340:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2278      	movs	r2, #120	; 0x78
 8003352:	2100      	movs	r1, #0
 8003354:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	0018      	movs	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	b010      	add	sp, #64	; 0x40
 800335e:	bd80      	pop	{r7, pc}
 8003360:	01ffffff 	.word	0x01ffffff
 8003364:	fffffedf 	.word	0xfffffedf

08003368 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	603b      	str	r3, [r7, #0]
 8003374:	1dfb      	adds	r3, r7, #7
 8003376:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003378:	e04b      	b.n	8003412 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	3301      	adds	r3, #1
 800337e:	d048      	beq.n	8003412 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003380:	f7fd fb80 	bl	8000a84 <HAL_GetTick>
 8003384:	0002      	movs	r2, r0
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	429a      	cmp	r2, r3
 800338e:	d302      	bcc.n	8003396 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e04b      	b.n	8003432 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2204      	movs	r2, #4
 80033a2:	4013      	ands	r3, r2
 80033a4:	d035      	beq.n	8003412 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	2208      	movs	r2, #8
 80033ae:	4013      	ands	r3, r2
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d111      	bne.n	80033d8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2208      	movs	r2, #8
 80033ba:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	0018      	movs	r0, r3
 80033c0:	f000 f83c 	bl	800343c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2284      	movs	r2, #132	; 0x84
 80033c8:	2108      	movs	r1, #8
 80033ca:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2278      	movs	r2, #120	; 0x78
 80033d0:	2100      	movs	r1, #0
 80033d2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e02c      	b.n	8003432 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	69da      	ldr	r2, [r3, #28]
 80033de:	2380      	movs	r3, #128	; 0x80
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	401a      	ands	r2, r3
 80033e4:	2380      	movs	r3, #128	; 0x80
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d112      	bne.n	8003412 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2280      	movs	r2, #128	; 0x80
 80033f2:	0112      	lsls	r2, r2, #4
 80033f4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	0018      	movs	r0, r3
 80033fa:	f000 f81f 	bl	800343c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2284      	movs	r2, #132	; 0x84
 8003402:	2120      	movs	r1, #32
 8003404:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2278      	movs	r2, #120	; 0x78
 800340a:	2100      	movs	r1, #0
 800340c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e00f      	b.n	8003432 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	4013      	ands	r3, r2
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	425a      	negs	r2, r3
 8003422:	4153      	adcs	r3, r2
 8003424:	b2db      	uxtb	r3, r3
 8003426:	001a      	movs	r2, r3
 8003428:	1dfb      	adds	r3, r7, #7
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	429a      	cmp	r2, r3
 800342e:	d0a4      	beq.n	800337a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	0018      	movs	r0, r3
 8003434:	46bd      	mov	sp, r7
 8003436:	b004      	add	sp, #16
 8003438:	bd80      	pop	{r7, pc}
	...

0800343c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b08e      	sub	sp, #56	; 0x38
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003444:	f3ef 8310 	mrs	r3, PRIMASK
 8003448:	617b      	str	r3, [r7, #20]
  return(result);
 800344a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800344c:	637b      	str	r3, [r7, #52]	; 0x34
 800344e:	2301      	movs	r3, #1
 8003450:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	f383 8810 	msr	PRIMASK, r3
}
 8003458:	46c0      	nop			; (mov r8, r8)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4926      	ldr	r1, [pc, #152]	; (8003500 <UART_EndRxTransfer+0xc4>)
 8003466:	400a      	ands	r2, r1
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800346c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	f383 8810 	msr	PRIMASK, r3
}
 8003474:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003476:	f3ef 8310 	mrs	r3, PRIMASK
 800347a:	623b      	str	r3, [r7, #32]
  return(result);
 800347c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800347e:	633b      	str	r3, [r7, #48]	; 0x30
 8003480:	2301      	movs	r3, #1
 8003482:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	f383 8810 	msr	PRIMASK, r3
}
 800348a:	46c0      	nop			; (mov r8, r8)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2101      	movs	r1, #1
 8003498:	438a      	bics	r2, r1
 800349a:	609a      	str	r2, [r3, #8]
 800349c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a2:	f383 8810 	msr	PRIMASK, r3
}
 80034a6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d118      	bne.n	80034e2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034b0:	f3ef 8310 	mrs	r3, PRIMASK
 80034b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80034b6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034ba:	2301      	movs	r3, #1
 80034bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f383 8810 	msr	PRIMASK, r3
}
 80034c4:	46c0      	nop			; (mov r8, r8)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2110      	movs	r1, #16
 80034d2:	438a      	bics	r2, r1
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	f383 8810 	msr	PRIMASK, r3
}
 80034e0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2280      	movs	r2, #128	; 0x80
 80034e6:	2120      	movs	r1, #32
 80034e8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	46bd      	mov	sp, r7
 80034fa:	b00e      	add	sp, #56	; 0x38
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	fffffedf 	.word	0xfffffedf

08003504 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003510:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	225a      	movs	r2, #90	; 0x5a
 8003516:	2100      	movs	r1, #0
 8003518:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2252      	movs	r2, #82	; 0x52
 800351e:	2100      	movs	r1, #0
 8003520:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	0018      	movs	r0, r3
 8003526:	f7ff fb65 	bl	8002bf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	46bd      	mov	sp, r7
 800352e:	b004      	add	sp, #16
 8003530:	bd80      	pop	{r7, pc}

08003532 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b086      	sub	sp, #24
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800353a:	f3ef 8310 	mrs	r3, PRIMASK
 800353e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003540:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003542:	617b      	str	r3, [r7, #20]
 8003544:	2301      	movs	r3, #1
 8003546:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f383 8810 	msr	PRIMASK, r3
}
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2140      	movs	r1, #64	; 0x40
 800355c:	438a      	bics	r2, r1
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	f383 8810 	msr	PRIMASK, r3
}
 800356a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2220      	movs	r2, #32
 8003570:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	0018      	movs	r0, r3
 800357c:	f7ff fb32 	bl	8002be4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003580:	46c0      	nop			; (mov r8, r8)
 8003582:	46bd      	mov	sp, r7
 8003584:	b006      	add	sp, #24
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003590:	46c0      	nop			; (mov r8, r8)
 8003592:	46bd      	mov	sp, r7
 8003594:	b002      	add	sp, #8
 8003596:	bd80      	pop	{r7, pc}

08003598 <__libc_init_array>:
 8003598:	b570      	push	{r4, r5, r6, lr}
 800359a:	2600      	movs	r6, #0
 800359c:	4d0c      	ldr	r5, [pc, #48]	; (80035d0 <__libc_init_array+0x38>)
 800359e:	4c0d      	ldr	r4, [pc, #52]	; (80035d4 <__libc_init_array+0x3c>)
 80035a0:	1b64      	subs	r4, r4, r5
 80035a2:	10a4      	asrs	r4, r4, #2
 80035a4:	42a6      	cmp	r6, r4
 80035a6:	d109      	bne.n	80035bc <__libc_init_array+0x24>
 80035a8:	2600      	movs	r6, #0
 80035aa:	f000 f821 	bl	80035f0 <_init>
 80035ae:	4d0a      	ldr	r5, [pc, #40]	; (80035d8 <__libc_init_array+0x40>)
 80035b0:	4c0a      	ldr	r4, [pc, #40]	; (80035dc <__libc_init_array+0x44>)
 80035b2:	1b64      	subs	r4, r4, r5
 80035b4:	10a4      	asrs	r4, r4, #2
 80035b6:	42a6      	cmp	r6, r4
 80035b8:	d105      	bne.n	80035c6 <__libc_init_array+0x2e>
 80035ba:	bd70      	pop	{r4, r5, r6, pc}
 80035bc:	00b3      	lsls	r3, r6, #2
 80035be:	58eb      	ldr	r3, [r5, r3]
 80035c0:	4798      	blx	r3
 80035c2:	3601      	adds	r6, #1
 80035c4:	e7ee      	b.n	80035a4 <__libc_init_array+0xc>
 80035c6:	00b3      	lsls	r3, r6, #2
 80035c8:	58eb      	ldr	r3, [r5, r3]
 80035ca:	4798      	blx	r3
 80035cc:	3601      	adds	r6, #1
 80035ce:	e7f2      	b.n	80035b6 <__libc_init_array+0x1e>
 80035d0:	08003684 	.word	0x08003684
 80035d4:	08003684 	.word	0x08003684
 80035d8:	08003684 	.word	0x08003684
 80035dc:	08003688 	.word	0x08003688

080035e0 <memset>:
 80035e0:	0003      	movs	r3, r0
 80035e2:	1882      	adds	r2, r0, r2
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d100      	bne.n	80035ea <memset+0xa>
 80035e8:	4770      	bx	lr
 80035ea:	7019      	strb	r1, [r3, #0]
 80035ec:	3301      	adds	r3, #1
 80035ee:	e7f9      	b.n	80035e4 <memset+0x4>

080035f0 <_init>:
 80035f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035f2:	46c0      	nop			; (mov r8, r8)
 80035f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035f6:	bc08      	pop	{r3}
 80035f8:	469e      	mov	lr, r3
 80035fa:	4770      	bx	lr

080035fc <_fini>:
 80035fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003602:	bc08      	pop	{r3}
 8003604:	469e      	mov	lr, r3
 8003606:	4770      	bx	lr
